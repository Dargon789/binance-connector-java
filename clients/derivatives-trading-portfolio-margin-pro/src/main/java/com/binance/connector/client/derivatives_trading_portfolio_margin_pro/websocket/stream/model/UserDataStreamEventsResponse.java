/*
 * Binance Derivatives Trading Portfolio Margin Pro WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin_pro.websocket.stream.model;

import com.binance.connector.client.common.AbstractOpenApiSchema;
import com.binance.connector.client.derivatives_trading_portfolio_margin_pro.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.validator.constraints.*;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class UserDataStreamEventsResponse extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(UserDataStreamEventsResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UserDataStreamEventsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UserDataStreamEventsResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Risklevelchange> adapterRisklevelchange =
                    gson.getDelegateAdapter(this, TypeToken.get(Risklevelchange.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UserDataStreamEventsResponse>() {
                        @Override
                        public void write(JsonWriter out, UserDataStreamEventsResponse value)
                                throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `Risklevelchange`
                            if (value.getActualInstance() instanceof Risklevelchange) {
                                JsonElement element =
                                        adapterRisklevelchange.toJsonTree(
                                                (Risklevelchange) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " Risklevelchange");
                        }

                        @Override
                        public UserDataStreamEventsResponse read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            JsonObject jsonObject = jsonElement.getAsJsonObject();

                            // use discriminator value for faster oneOf lookup
                            UserDataStreamEventsResponse newUserDataStreamEventsResponse =
                                    new UserDataStreamEventsResponse();
                            if (jsonObject.get("e") == null) {
                                log.log(
                                        Level.WARNING,
                                        "Failed to lookup discriminator value for"
                                            + " UserDataStreamEventsResponse as `e` was not found"
                                            + " in the payload or the payload is empty.");
                            } else {
                                // look up the discriminator value in the field `e`
                                switch (jsonObject.get("e").getAsString()) {
                                    case "riskLevelChange":
                                        deserialized =
                                                adapterRisklevelchange.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "risklevelchange":
                                        deserialized =
                                                adapterRisklevelchange.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    default:
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                jsonElement.toString());
                                        log.log(
                                                Level.WARNING,
                                                String.format(
                                                        "Failed to lookup discriminator value `%s`"
                                                            + " for UserDataStreamEventsResponse."
                                                            + " Possible values: riskLevelChange"
                                                            + " risklevelchange. Falling back to"
                                                            + " String.",
                                                        jsonObject.get("e").getAsString()));
                                }
                            }

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize Risklevelchange
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Risklevelchange.validateJsonElement(jsonElement);
                                actualAdapter = adapterRisklevelchange;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Risklevelchange'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Risklevelchange failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Risklevelchange'",
                                        e);
                            }

                            if (match == 1) {
                                UserDataStreamEventsResponse ret =
                                        new UserDataStreamEventsResponse();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for"
                                                + " UserDataStreamEventsResponse: %d classes match"
                                                + " result, expected 1. Detailed failure message"
                                                + " for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UserDataStreamEventsResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public UserDataStreamEventsResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Risklevelchange", Risklevelchange.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UserDataStreamEventsResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: Risklevelchange
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Risklevelchange) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Risklevelchange");
    }

    /**
     * Get the actual instance, which can be the following: Risklevelchange
     *
     * @return The actual instance (Risklevelchange)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Risklevelchange`. If the actual instance is not
     * `Risklevelchange`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `Risklevelchange`
     * @throws ClassCastException if the instance is not `Risklevelchange`
     */
    public Risklevelchange getRisklevelchange() throws ClassCastException {
        return (Risklevelchange) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UserDataStreamEventsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Risklevelchange
        try {
            Risklevelchange.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Risklevelchange failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for UserDataStreamEventsResponse with oneOf"
                                    + " schemas: Risklevelchange. %d class(es) match the result,"
                                    + " expected 1. Detailed failure message for oneOf schemas: %s."
                                    + " JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UserDataStreamEventsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UserDataStreamEventsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     UserDataStreamEventsResponse
     */
    public static UserDataStreamEventsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UserDataStreamEventsResponse.class);
    }

    /**
     * Convert an instance of UserDataStreamEventsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

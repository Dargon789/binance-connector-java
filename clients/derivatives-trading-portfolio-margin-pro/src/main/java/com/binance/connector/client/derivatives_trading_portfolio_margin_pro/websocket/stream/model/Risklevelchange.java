/*
 * Binance Derivatives Trading Portfolio Margin Pro WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin_pro.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_portfolio_margin_pro.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** Risklevelchange */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class Risklevelchange extends BaseDTO {
    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String uLowerCase;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_EQ = "eq";

    @SerializedName(SERIALIZED_NAME_EQ)
    @jakarta.annotation.Nullable
    private String eq;

    public static final String SERIALIZED_NAME_AE = "ae";

    @SerializedName(SERIALIZED_NAME_AE)
    @jakarta.annotation.Nullable
    private String ae;

    public static final String SERIALIZED_NAME_M_LOWER_CASE = "m";

    @SerializedName(SERIALIZED_NAME_M_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String mLowerCase;

    public Risklevelchange() {}

    public Risklevelchange E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public Risklevelchange uLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public String getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public Risklevelchange sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public Risklevelchange eq(@jakarta.annotation.Nullable String eq) {
        this.eq = eq;
        return this;
    }

    /**
     * Get eq
     *
     * @return eq
     */
    @jakarta.annotation.Nullable
    public String getEq() {
        return eq;
    }

    public void setEq(@jakarta.annotation.Nullable String eq) {
        this.eq = eq;
    }

    public Risklevelchange ae(@jakarta.annotation.Nullable String ae) {
        this.ae = ae;
        return this;
    }

    /**
     * Get ae
     *
     * @return ae
     */
    @jakarta.annotation.Nullable
    public String getAe() {
        return ae;
    }

    public void setAe(@jakarta.annotation.Nullable String ae) {
        this.ae = ae;
    }

    public Risklevelchange mLowerCase(@jakarta.annotation.Nullable String mLowerCase) {
        this.mLowerCase = mLowerCase;
        return this;
    }

    /**
     * Get mLowerCase
     *
     * @return mLowerCase
     */
    @jakarta.annotation.Nullable
    public String getmLowerCase() {
        return mLowerCase;
    }

    public void setmLowerCase(@jakarta.annotation.Nullable String mLowerCase) {
        this.mLowerCase = mLowerCase;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Risklevelchange risklevelchange = (Risklevelchange) o;
        return Objects.equals(this.E, risklevelchange.E)
                && Objects.equals(this.uLowerCase, risklevelchange.uLowerCase)
                && Objects.equals(this.sLowerCase, risklevelchange.sLowerCase)
                && Objects.equals(this.eq, risklevelchange.eq)
                && Objects.equals(this.ae, risklevelchange.ae)
                && Objects.equals(this.mLowerCase, risklevelchange.mLowerCase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(E, uLowerCase, sLowerCase, eq, ae, mLowerCase);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Risklevelchange {\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		eq: ").append(toIndentedString(eq)).append("\n");
        sb.append("		ae: ").append(toIndentedString(ae)).append("\n");
        sb.append("		mLowerCase: ").append(toIndentedString(mLowerCase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            String uLowerCaseValueAsString = uLowerCaseValue.toString();
            valMap.put("uLowerCase", uLowerCaseValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String eqValue = getEq();
        if (eqValue != null) {
            String eqValueAsString = eqValue.toString();
            valMap.put("eq", eqValueAsString);
        }
        String aeValue = getAe();
        if (aeValue != null) {
            String aeValueAsString = aeValue.toString();
            valMap.put("ae", aeValueAsString);
        }
        String mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            String mLowerCaseValueAsString = mLowerCaseValue.toString();
            valMap.put("mLowerCase", mLowerCaseValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            valMap.put("uLowerCase", uLowerCaseValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object eqValue = getEq();
        if (eqValue != null) {
            valMap.put("eq", eqValue);
        }
        Object aeValue = getAe();
        if (aeValue != null) {
            valMap.put("ae", aeValue);
        }
        Object mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            valMap.put("mLowerCase", mLowerCaseValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("E");
        openapiFields.add("u");
        openapiFields.add("s");
        openapiFields.add("eq");
        openapiFields.add("ae");
        openapiFields.add("m");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Risklevelchange
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Risklevelchange.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Risklevelchange is not found in the"
                                        + " empty JSON string",
                                Risklevelchange.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Risklevelchange.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Risklevelchange` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("u") != null && !jsonObj.get("u").isJsonNull())
                && !jsonObj.get("u").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `u` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("u").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("eq") != null && !jsonObj.get("eq").isJsonNull())
                && !jsonObj.get("eq").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eq` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("eq").toString()));
        }
        if ((jsonObj.get("ae") != null && !jsonObj.get("ae").isJsonNull())
                && !jsonObj.get("ae").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ae` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ae").toString()));
        }
        if ((jsonObj.get("m") != null && !jsonObj.get("m").isJsonNull())
                && !jsonObj.get("m").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `m` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("m").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Risklevelchange.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Risklevelchange' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Risklevelchange> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Risklevelchange.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Risklevelchange>() {
                        @Override
                        public void write(JsonWriter out, Risklevelchange value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Risklevelchange read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Risklevelchange given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Risklevelchange
     * @throws IOException if the JSON string is invalid with respect to Risklevelchange
     */
    public static Risklevelchange fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Risklevelchange.class);
    }

    /**
     * Convert an instance of Risklevelchange to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData {
    public static final String SERIALIZED_NAME_BALANCES = "balances";

    @SerializedName(SERIALIZED_NAME_BALANCES)
    @jakarta.annotation.Nullable
    private List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataBalancesInner>
            balances;

    public static final String SERIALIZED_NAME_TOTAL_ASSET_OF_BTC = "totalAssetOfBtc";

    @SerializedName(SERIALIZED_NAME_TOTAL_ASSET_OF_BTC)
    @jakarta.annotation.Nullable
    private String totalAssetOfBtc;

    public static final String SERIALIZED_NAME_MARGIN_LEVEL = "marginLevel";

    @SerializedName(SERIALIZED_NAME_MARGIN_LEVEL)
    @jakarta.annotation.Nullable
    private String marginLevel;

    public static final String SERIALIZED_NAME_TOTAL_LIABILITY_OF_BTC = "totalLiabilityOfBtc";

    @SerializedName(SERIALIZED_NAME_TOTAL_LIABILITY_OF_BTC)
    @jakarta.annotation.Nullable
    private String totalLiabilityOfBtc;

    public static final String SERIALIZED_NAME_TOTAL_NET_ASSET_OF_BTC = "totalNetAssetOfBtc";

    @SerializedName(SERIALIZED_NAME_TOTAL_NET_ASSET_OF_BTC)
    @jakarta.annotation.Nullable
    private String totalNetAssetOfBtc;

    public static final String SERIALIZED_NAME_USER_ASSETS = "userAssets";

    @SerializedName(SERIALIZED_NAME_USER_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataUserAssetsInner>
            userAssets;

    public static final String SERIALIZED_NAME_ASSETS = "assets";

    @SerializedName(SERIALIZED_NAME_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataAssetsInner>
            assets;

    public static final String SERIALIZED_NAME_POSITION = "position";

    @SerializedName(SERIALIZED_NAME_POSITION)
    @jakarta.annotation.Nullable
    private List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataPositionInner>
            position;

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData() {}

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData balances(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataBalancesInner>
                            balances) {
        this.balances = balances;
        return this;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData addBalancesItem(
            QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataBalancesInner balancesItem) {
        if (this.balances == null) {
            this.balances = new ArrayList<>();
        }
        this.balances.add(balancesItem);
        return this;
    }

    /**
     * Get balances
     *
     * @return balances
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataBalancesInner>
            getBalances() {
        return balances;
    }

    public void setBalances(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataBalancesInner>
                            balances) {
        this.balances = balances;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData totalAssetOfBtc(
            @jakarta.annotation.Nullable String totalAssetOfBtc) {
        this.totalAssetOfBtc = totalAssetOfBtc;
        return this;
    }

    /**
     * Get totalAssetOfBtc
     *
     * @return totalAssetOfBtc
     */
    @jakarta.annotation.Nullable
    public String getTotalAssetOfBtc() {
        return totalAssetOfBtc;
    }

    public void setTotalAssetOfBtc(@jakarta.annotation.Nullable String totalAssetOfBtc) {
        this.totalAssetOfBtc = totalAssetOfBtc;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData marginLevel(
            @jakarta.annotation.Nullable String marginLevel) {
        this.marginLevel = marginLevel;
        return this;
    }

    /**
     * Get marginLevel
     *
     * @return marginLevel
     */
    @jakarta.annotation.Nullable
    public String getMarginLevel() {
        return marginLevel;
    }

    public void setMarginLevel(@jakarta.annotation.Nullable String marginLevel) {
        this.marginLevel = marginLevel;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData totalLiabilityOfBtc(
            @jakarta.annotation.Nullable String totalLiabilityOfBtc) {
        this.totalLiabilityOfBtc = totalLiabilityOfBtc;
        return this;
    }

    /**
     * Get totalLiabilityOfBtc
     *
     * @return totalLiabilityOfBtc
     */
    @jakarta.annotation.Nullable
    public String getTotalLiabilityOfBtc() {
        return totalLiabilityOfBtc;
    }

    public void setTotalLiabilityOfBtc(@jakarta.annotation.Nullable String totalLiabilityOfBtc) {
        this.totalLiabilityOfBtc = totalLiabilityOfBtc;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData totalNetAssetOfBtc(
            @jakarta.annotation.Nullable String totalNetAssetOfBtc) {
        this.totalNetAssetOfBtc = totalNetAssetOfBtc;
        return this;
    }

    /**
     * Get totalNetAssetOfBtc
     *
     * @return totalNetAssetOfBtc
     */
    @jakarta.annotation.Nullable
    public String getTotalNetAssetOfBtc() {
        return totalNetAssetOfBtc;
    }

    public void setTotalNetAssetOfBtc(@jakarta.annotation.Nullable String totalNetAssetOfBtc) {
        this.totalNetAssetOfBtc = totalNetAssetOfBtc;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData userAssets(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataUserAssetsInner>
                            userAssets) {
        this.userAssets = userAssets;
        return this;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData addUserAssetsItem(
            QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataUserAssetsInner
                    userAssetsItem) {
        if (this.userAssets == null) {
            this.userAssets = new ArrayList<>();
        }
        this.userAssets.add(userAssetsItem);
        return this;
    }

    /**
     * Get userAssets
     *
     * @return userAssets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataUserAssetsInner>
            getUserAssets() {
        return userAssets;
    }

    public void setUserAssets(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataUserAssetsInner>
                            userAssets) {
        this.userAssets = userAssets;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData assets(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataAssetsInner>
                            assets) {
        this.assets = assets;
        return this;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData addAssetsItem(
            QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataAssetsInner assetsItem) {
        if (this.assets == null) {
            this.assets = new ArrayList<>();
        }
        this.assets.add(assetsItem);
        return this;
    }

    /**
     * Get assets
     *
     * @return assets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataAssetsInner>
            getAssets() {
        return assets;
    }

    public void setAssets(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataAssetsInner>
                            assets) {
        this.assets = assets;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData position(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataPositionInner>
                            position) {
        this.position = position;
        return this;
    }

    public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData addPositionItem(
            QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataPositionInner positionItem) {
        if (this.position == null) {
            this.position = new ArrayList<>();
        }
        this.position.add(positionItem);
        return this;
    }

    /**
     * Get position
     *
     * @return position
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataPositionInner>
            getPosition() {
        return position;
    }

    public void setPosition(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataPositionInner>
                            position) {
        this.position = position;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData
                queryManagedSubAccountSnapshotResponseSnapshotVosInnerData =
                        (QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData) o;
        return Objects.equals(
                        this.balances,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData.balances)
                && Objects.equals(
                        this.totalAssetOfBtc,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData.totalAssetOfBtc)
                && Objects.equals(
                        this.marginLevel,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData.marginLevel)
                && Objects.equals(
                        this.totalLiabilityOfBtc,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData
                                .totalLiabilityOfBtc)
                && Objects.equals(
                        this.totalNetAssetOfBtc,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData
                                .totalNetAssetOfBtc)
                && Objects.equals(
                        this.userAssets,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData.userAssets)
                && Objects.equals(
                        this.assets,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData.assets)
                && Objects.equals(
                        this.position,
                        queryManagedSubAccountSnapshotResponseSnapshotVosInnerData.position);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                balances,
                totalAssetOfBtc,
                marginLevel,
                totalLiabilityOfBtc,
                totalNetAssetOfBtc,
                userAssets,
                assets,
                position);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData {\n");
        sb.append("		balances: ").append(toIndentedString(balances)).append("\n");
        sb.append("		totalAssetOfBtc: ").append(toIndentedString(totalAssetOfBtc)).append("\n");
        sb.append("		marginLevel: ").append(toIndentedString(marginLevel)).append("\n");
        sb.append("		totalLiabilityOfBtc: ")
                .append(toIndentedString(totalLiabilityOfBtc))
                .append("\n");
        sb.append("		totalNetAssetOfBtc: ")
                .append(toIndentedString(totalNetAssetOfBtc))
                .append("\n");
        sb.append("		userAssets: ").append(toIndentedString(userAssets)).append("\n");
        sb.append("		assets: ").append(toIndentedString(assets)).append("\n");
        sb.append("		position: ").append(toIndentedString(position)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object balancesValue = getBalances();
        String balancesValueAsString = "";
        balancesValueAsString =
                (String)
                        ((Collection) balancesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("balances=").append(urlEncode(balancesValueAsString)).append("");
        Object totalAssetOfBtcValue = getTotalAssetOfBtc();
        String totalAssetOfBtcValueAsString = "";
        totalAssetOfBtcValueAsString = totalAssetOfBtcValue.toString();
        sb.append("totalAssetOfBtc=").append(urlEncode(totalAssetOfBtcValueAsString)).append("");
        Object marginLevelValue = getMarginLevel();
        String marginLevelValueAsString = "";
        marginLevelValueAsString = marginLevelValue.toString();
        sb.append("marginLevel=").append(urlEncode(marginLevelValueAsString)).append("");
        Object totalLiabilityOfBtcValue = getTotalLiabilityOfBtc();
        String totalLiabilityOfBtcValueAsString = "";
        totalLiabilityOfBtcValueAsString = totalLiabilityOfBtcValue.toString();
        sb.append("totalLiabilityOfBtc=")
                .append(urlEncode(totalLiabilityOfBtcValueAsString))
                .append("");
        Object totalNetAssetOfBtcValue = getTotalNetAssetOfBtc();
        String totalNetAssetOfBtcValueAsString = "";
        totalNetAssetOfBtcValueAsString = totalNetAssetOfBtcValue.toString();
        sb.append("totalNetAssetOfBtc=")
                .append(urlEncode(totalNetAssetOfBtcValueAsString))
                .append("");
        Object userAssetsValue = getUserAssets();
        String userAssetsValueAsString = "";
        userAssetsValueAsString =
                (String)
                        ((Collection) userAssetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("userAssets=").append(urlEncode(userAssetsValueAsString)).append("");
        Object assetsValue = getAssets();
        String assetsValueAsString = "";
        assetsValueAsString =
                (String)
                        ((Collection) assetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assets=").append(urlEncode(assetsValueAsString)).append("");
        Object positionValue = getPosition();
        String positionValueAsString = "";
        positionValueAsString =
                (String)
                        ((Collection) positionValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("position=").append(urlEncode(positionValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("balances");
        openapiFields.add("totalAssetOfBtc");
        openapiFields.add("marginLevel");
        openapiFields.add("totalLiabilityOfBtc");
        openapiFields.add("totalNetAssetOfBtc");
        openapiFields.add("userAssets");
        openapiFields.add("assets");
        openapiFields.add("position");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData"
                                    + " is not found in the empty JSON string",
                                QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData
                                        .openapiRequiredFields
                                        .toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
            JsonArray jsonArraybalances = jsonObj.getAsJsonArray("balances");
            if (jsonArraybalances != null) {
                // ensure the json data is an array
                if (!jsonObj.get("balances").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `balances` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("balances").toString()));
                }

                // validate the optional field `balances` (array)
                for (int i = 0; i < jsonArraybalances.size(); i++) {
                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataBalancesInner
                            .validateJsonElement(jsonArraybalances.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("totalAssetOfBtc") != null && !jsonObj.get("totalAssetOfBtc").isJsonNull())
                && !jsonObj.get("totalAssetOfBtc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalAssetOfBtc` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalAssetOfBtc").toString()));
        }
        if ((jsonObj.get("marginLevel") != null && !jsonObj.get("marginLevel").isJsonNull())
                && !jsonObj.get("marginLevel").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginLevel` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("marginLevel").toString()));
        }
        if ((jsonObj.get("totalLiabilityOfBtc") != null
                        && !jsonObj.get("totalLiabilityOfBtc").isJsonNull())
                && !jsonObj.get("totalLiabilityOfBtc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalLiabilityOfBtc` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalLiabilityOfBtc").toString()));
        }
        if ((jsonObj.get("totalNetAssetOfBtc") != null
                        && !jsonObj.get("totalNetAssetOfBtc").isJsonNull())
                && !jsonObj.get("totalNetAssetOfBtc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalNetAssetOfBtc` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalNetAssetOfBtc").toString()));
        }
        if (jsonObj.get("userAssets") != null && !jsonObj.get("userAssets").isJsonNull()) {
            JsonArray jsonArrayuserAssets = jsonObj.getAsJsonArray("userAssets");
            if (jsonArrayuserAssets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("userAssets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `userAssets` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("userAssets").toString()));
                }

                // validate the optional field `userAssets` (array)
                for (int i = 0; i < jsonArrayuserAssets.size(); i++) {
                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataUserAssetsInner
                            .validateJsonElement(jsonArrayuserAssets.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
            JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
            if (jsonArrayassets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assets` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("assets").toString()));
                }

                // validate the optional field `assets` (array)
                for (int i = 0; i < jsonArrayassets.size(); i++) {
                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataAssetsInner
                            .validateJsonElement(jsonArrayassets.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
            JsonArray jsonArrayposition = jsonObj.getAsJsonArray("position");
            if (jsonArrayposition != null) {
                // ensure the json data is an array
                if (!jsonObj.get("position").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `position` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("position").toString()));
                }

                // validate the optional field `position` (array)
                for (int i = 0; i < jsonArrayposition.size(); i++) {
                    QueryManagedSubAccountSnapshotResponseSnapshotVosInnerDataPositionInner
                            .validateJsonElement(jsonArrayposition.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData given an
     * JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData
     */
    public static QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData.class);
    }

    /**
     * Convert an instance of QueryManagedSubAccountSnapshotResponseSnapshotVosInnerData to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.sub_account.rest.model.DepositAssetsIntoTheManagedSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.DepositAssetsIntoTheManagedSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetManagedSubAccountDepositAddressResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountAssetDetailsResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountFuturesAssetDetailsResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountListResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountMarginAssetDetailsResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountSnapshotResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountTransferLogMasterAccountInvestorResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountTransferLogMasterAccountTradingResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountTransferLogSubAccountTradingResponse;
import com.binance.connector.client.sub_account.rest.model.WithdrawlAssetsFromTheManagedSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.WithdrawlAssetsFromTheManagedSubAccountResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for ManagedSubAccountApi */
public class ManagedSubAccountApiTest {

    private ManagedSubAccountApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new ManagedSubAccountApi(apiClientSpy);
    }

    /**
     * Deposit Assets Into The Managed Sub-account(For Investor Master Account)
     *
     * <p>Deposit Assets Into The Managed Sub-account * You need to enable &#x60;Enable Spot &amp;
     * Margin Trading&#x60; option for the api key which requests this endpoint Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void depositAssetsIntoTheManagedSubAccountTest() throws ApiException, CryptoException {
        DepositAssetsIntoTheManagedSubAccountRequest depositAssetsIntoTheManagedSubAccountRequest =
                new DepositAssetsIntoTheManagedSubAccountRequest();

        depositAssetsIntoTheManagedSubAccountRequest.toEmail("");
        depositAssetsIntoTheManagedSubAccountRequest.asset("");
        depositAssetsIntoTheManagedSubAccountRequest.amount(1d);

        ApiResponse<DepositAssetsIntoTheManagedSubAccountResponse> response =
                api.depositAssetsIntoTheManagedSubAccount(
                        depositAssetsIntoTheManagedSubAccountRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000amount=1&asset=&toEmail=", signInputCaptor.getValue());
        assertEquals(
                "227adce1b6fa8cd89964bd4feedcc86fc42fea35068da084d94698405ba251b8",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/managed-subaccount/deposit", actualRequest.url().encodedPath());
    }

    /**
     * Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     *
     * <p>Get investor&#39;s managed sub-account deposit address. * If &#x60;network&#x60; is not
     * send, return with default &#x60;network&#x60; of the &#x60;coin&#x60;. * * &#x60;amount&#x60;
     * needs to be sent if using LIGHTNING network Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManagedSubAccountDepositAddressTest() throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        String coin = "";
        String network = "";
        Double amount = 1d;
        Long recvWindow = 5000L;
        ApiResponse<GetManagedSubAccountDepositAddressResponse> response =
                api.getManagedSubAccountDepositAddress(email, coin, network, amount, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&coin=&network=&amount=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "8775619e5f1bf1f99041b1f456c76870f8582b64031236aeb73211e3ad0476e0",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/managed-subaccount/deposit/address", actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub-account Asset Details(For Investor Master Account)
     *
     * <p>Query Managed Sub-account Asset Details Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountAssetDetailsTest() throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        Long recvWindow = 5000L;
        ApiResponse<QueryManagedSubAccountAssetDetailsResponse> response =
                api.queryManagedSubAccountAssetDetails(email, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "bbb3a67207210f851b76211eae9566a7b03cd2d37dde4e5b73d48265f7b9197e",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/managed-subaccount/asset", actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     *
     * <p>Investor can use this api to query managed sub account futures asset details Weight: 60
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountFuturesAssetDetailsTest()
            throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        String accountType = "";
        ApiResponse<QueryManagedSubAccountFuturesAssetDetailsResponse> response =
                api.queryManagedSubAccountFuturesAssetDetails(email, accountType);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&accountType=&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "f304bae266239f54bc793653d4cd4e29a0c6e08889fc9beae2fcea3db9520660",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/managed-subaccount/fetch-future-asset",
                actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub-account List(For Investor)(USER_DATA)
     *
     * <p>Get investor&#39;s managed sub-account list. Weight: 60
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountListTest() throws ApiException, CryptoException {
        String email = "";
        Long page = 1L;
        Long limit = 1L;
        Long recvWindow = 5000L;
        ApiResponse<QueryManagedSubAccountListResponse> response =
                api.queryManagedSubAccountList(email, page, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=&page=1&limit=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "59d1ab1944836e12ee2d5bb7ff0477b7fef74e6071fc2ceffa8794ad5e0d7a71",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/managed-subaccount/info", actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     *
     * <p>Investor can use this api to query managed sub account margin asset details Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountMarginAssetDetailsTest()
            throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        String accountType = "";
        ApiResponse<QueryManagedSubAccountMarginAssetDetailsResponse> response =
                api.queryManagedSubAccountMarginAssetDetails(email, accountType);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&accountType=&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "f304bae266239f54bc793653d4cd4e29a0c6e08889fc9beae2fcea3db9520660",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/managed-subaccount/marginAsset", actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub-account Snapshot(For Investor Master Account)
     *
     * <p>Query Managed Sub-account Snapshot * The query time period must be less then 30 days *
     * Support query within the last one month only * If startTimeand endTime not sent, return
     * records of the last 7 days by default Weight: 2400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountSnapshotTest() throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        String type = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 1L;
        Long recvWindow = 5000L;
        ApiResponse<QueryManagedSubAccountSnapshotResponse> response =
                api.queryManagedSubAccountSnapshot(
                        email, type, startTime, endTime, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&type=&startTime=1623319461670&endTime=1641782889000&limit=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "798f63c636a19b23eafed70bc3b49d260b1a3c84da75aa5a05168e2c182eea14",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/managed-subaccount/accountSnapshot", actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     *
     * <p>Investor can use this api to query managed sub account transfer log. This endpoint is
     * available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for
     * investors who value flexibility in asset allocation and account application, while delegating
     * trades to a professional trading team. Please refer to
     * [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     * Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountTransferLogMasterAccountInvestorTest()
            throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long page = 0L;
        Long limit = 0L;
        String transfers = "";
        String transferFunctionAccountType = "";
        ApiResponse<QueryManagedSubAccountTransferLogMasterAccountInvestorResponse> response =
                api.queryManagedSubAccountTransferLogMasterAccountInvestor(
                        email,
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&startTime=1623319461670&endTime=1641782889000&page=0&limit=0&transfers=&transferFunctionAccountType=&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "c599759baae54f1cbc6819afc54293b31bd6d2b9bfb9d63ef31317dc02d576e9",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/managed-subaccount/queryTransLogForInvestor",
                actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     *
     * <p>Trading team can use this api to query managed sub account transfer log. This endpoint is
     * available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type
     * for investors who value flexibility in asset allocation and account application, while
     * delegating trades to a professional trading team. Please refer to
     * [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     * Weight: 60
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountTransferLogMasterAccountTradingTest()
            throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long page = 0L;
        Long limit = 0L;
        String transfers = "";
        String transferFunctionAccountType = "";
        ApiResponse<QueryManagedSubAccountTransferLogMasterAccountTradingResponse> response =
                api.queryManagedSubAccountTransferLogMasterAccountTrading(
                        email,
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "email=sub-account-email%40email.com&startTime=1623319461670&endTime=1641782889000&page=0&limit=0&transfers=&transferFunctionAccountType=&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "c599759baae54f1cbc6819afc54293b31bd6d2b9bfb9d63ef31317dc02d576e9",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/managed-subaccount/queryTransLogForTradeParent",
                actualRequest.url().encodedPath());
    }

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     *
     * <p>Query Managed Sub Account Transfer Log (For Trading Team Sub Account) Weight: 60
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryManagedSubAccountTransferLogSubAccountTradingTest()
            throws ApiException, CryptoException {
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long page = 0L;
        Long limit = 0L;
        String transfers = "";
        String transferFunctionAccountType = "";
        Long recvWindow = 5000L;
        ApiResponse<QueryManagedSubAccountTransferLogSubAccountTradingResponse> response =
                api.queryManagedSubAccountTransferLogSubAccountTrading(
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "startTime=1623319461670&endTime=1641782889000&page=0&limit=0&transfers=&transferFunctionAccountType=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "b59ab6777669cdc39572866581590352bd013db054272dfe561a707921813c24",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/managed-subaccount/query-trans-log", actualRequest.url().encodedPath());
    }

    /**
     * Withdrawl Assets From The Managed Sub-account(For Investor Master Account)
     *
     * <p>Withdrawl Assets From The Managed Sub-account * You need to enable &#x60;Enable Spot &amp;
     * Margin Trading&#x60; option for the api key which requests this endpoint Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void withdrawlAssetsFromTheManagedSubAccountTest() throws ApiException, CryptoException {
        WithdrawlAssetsFromTheManagedSubAccountRequest
                withdrawlAssetsFromTheManagedSubAccountRequest =
                        new WithdrawlAssetsFromTheManagedSubAccountRequest();

        withdrawlAssetsFromTheManagedSubAccountRequest.fromEmail("");
        withdrawlAssetsFromTheManagedSubAccountRequest.asset("");
        withdrawlAssetsFromTheManagedSubAccountRequest.amount(1d);

        ApiResponse<WithdrawlAssetsFromTheManagedSubAccountResponse> response =
                api.withdrawlAssetsFromTheManagedSubAccount(
                        withdrawlAssetsFromTheManagedSubAccountRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000amount=1&asset=&fromEmail=", signInputCaptor.getValue());
        assertEquals(
                "2a0783094485dc7627ebacda95b82dab6b57ddc19fa05930073f93f5f157ae46",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/managed-subaccount/withdraw", actualRequest.url().encodedPath());
    }
}

/*
 * Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_portfolio_margin.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** Openorderloss */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class Openorderloss extends BaseDTO {
    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_O = "O";

    @SerializedName(SERIALIZED_NAME_O)
    @jakarta.annotation.Nullable
    private List<@Valid OpenorderlossOInner> O;

    public Openorderloss() {}

    public Openorderloss E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public Openorderloss O(@jakarta.annotation.Nullable List<@Valid OpenorderlossOInner> O) {
        this.O = O;
        return this;
    }

    public Openorderloss addOItem(OpenorderlossOInner OItem) {
        if (this.O == null) {
            this.O = new ArrayList<>();
        }
        this.O.add(OItem);
        return this;
    }

    /**
     * Get O
     *
     * @return O
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid OpenorderlossOInner> getO() {
        return O;
    }

    public void setO(@jakarta.annotation.Nullable List<@Valid OpenorderlossOInner> O) {
        this.O = O;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Openorderloss openorderloss = (Openorderloss) o;
        return Objects.equals(this.E, openorderloss.E) && Objects.equals(this.O, openorderloss.O);
    }

    @Override
    public int hashCode() {
        return Objects.hash(E, O);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Openorderloss {\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		O: ").append(toIndentedString(O)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        List<@Valid OpenorderlossOInner> OValue = getO();
        if (OValue != null) {
            String OValueAsString = JSON.getGson().toJson(OValue);
            valMap.put("O", OValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object OValue = getO();
        if (OValue != null) {
            valMap.put("O", OValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("E");
        openapiFields.add("O");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Openorderloss
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Openorderloss.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Openorderloss is not found in the"
                                        + " empty JSON string",
                                Openorderloss.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Openorderloss.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Openorderloss` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("O") != null && !jsonObj.get("O").isJsonNull()) {
            JsonArray jsonArrayO = jsonObj.getAsJsonArray("O");
            if (jsonArrayO != null) {
                // ensure the json data is an array
                if (!jsonObj.get("O").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `O` to be an array in the JSON string but"
                                            + " got `%s`",
                                    jsonObj.get("O").toString()));
                }

                // validate the optional field `O` (array)
                for (int i = 0; i < jsonArrayO.size(); i++) {
                    OpenorderlossOInner.validateJsonElement(jsonArrayO.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Openorderloss.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Openorderloss' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Openorderloss> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Openorderloss.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Openorderloss>() {
                        @Override
                        public void write(JsonWriter out, Openorderloss value) throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Openorderloss read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Openorderloss given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Openorderloss
     * @throws IOException if the JSON string is invalid with respect to Openorderloss
     */
    public static Openorderloss fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Openorderloss.class);
    }

    /**
     * Convert an instance of Openorderloss to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

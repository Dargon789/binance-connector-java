/*
 * Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_portfolio_margin.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ConditionalOrderTradeUpdateSo */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ConditionalOrderTradeUpdateSo extends BaseDTO {
    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String cLowerCase;

    public static final String SERIALIZED_NAME_SI = "si";

    @SerializedName(SERIALIZED_NAME_SI)
    @jakarta.annotation.Nullable
    private Long si;

    public static final String SERIALIZED_NAME_S = "S";

    @SerializedName(SERIALIZED_NAME_S)
    @jakarta.annotation.Nullable
    private String S;

    public static final String SERIALIZED_NAME_ST = "st";

    @SerializedName(SERIALIZED_NAME_ST)
    @jakarta.annotation.Nullable
    private String st;

    public static final String SERIALIZED_NAME_F_LOWER_CASE = "f";

    @SerializedName(SERIALIZED_NAME_F_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String fLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_SP = "sp";

    @SerializedName(SERIALIZED_NAME_SP)
    @jakarta.annotation.Nullable
    private String sp;

    public static final String SERIALIZED_NAME_OS = "os";

    @SerializedName(SERIALIZED_NAME_OS)
    @jakarta.annotation.Nullable
    private String os;

    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public static final String SERIALIZED_NAME_UT = "ut";

    @SerializedName(SERIALIZED_NAME_UT)
    @jakarta.annotation.Nullable
    private Long ut;

    public static final String SERIALIZED_NAME_R = "R";

    @SerializedName(SERIALIZED_NAME_R)
    @jakarta.annotation.Nullable
    private Boolean R;

    public static final String SERIALIZED_NAME_WT = "wt";

    @SerializedName(SERIALIZED_NAME_WT)
    @jakarta.annotation.Nullable
    private String wt;

    public static final String SERIALIZED_NAME_PS = "ps";

    @SerializedName(SERIALIZED_NAME_PS)
    @jakarta.annotation.Nullable
    private String ps;

    public static final String SERIALIZED_NAME_CP = "cp";

    @SerializedName(SERIALIZED_NAME_CP)
    @jakarta.annotation.Nullable
    private Boolean cp;

    public static final String SERIALIZED_NAME_A_P = "AP";

    @SerializedName(SERIALIZED_NAME_A_P)
    @jakarta.annotation.Nullable
    private String AP;

    public static final String SERIALIZED_NAME_CR = "cr";

    @SerializedName(SERIALIZED_NAME_CR)
    @jakarta.annotation.Nullable
    private String cr;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long iLowerCase;

    public static final String SERIALIZED_NAME_V = "V";

    @SerializedName(SERIALIZED_NAME_V)
    @jakarta.annotation.Nullable
    private String V;

    public static final String SERIALIZED_NAME_GTD = "gtd";

    @SerializedName(SERIALIZED_NAME_GTD)
    @jakarta.annotation.Nullable
    private Long gtd;

    public ConditionalOrderTradeUpdateSo() {}

    public ConditionalOrderTradeUpdateSo sLowerCase(
            @jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public ConditionalOrderTradeUpdateSo cLowerCase(
            @jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    public String getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    public ConditionalOrderTradeUpdateSo si(@jakarta.annotation.Nullable Long si) {
        this.si = si;
        return this;
    }

    /**
     * Get si
     *
     * @return si
     */
    @jakarta.annotation.Nullable
    public Long getSi() {
        return si;
    }

    public void setSi(@jakarta.annotation.Nullable Long si) {
        this.si = si;
    }

    public ConditionalOrderTradeUpdateSo S(@jakarta.annotation.Nullable String S) {
        this.S = S;
        return this;
    }

    /**
     * Get S
     *
     * @return S
     */
    @jakarta.annotation.Nullable
    public String getS() {
        return S;
    }

    public void setS(@jakarta.annotation.Nullable String S) {
        this.S = S;
    }

    public ConditionalOrderTradeUpdateSo st(@jakarta.annotation.Nullable String st) {
        this.st = st;
        return this;
    }

    /**
     * Get st
     *
     * @return st
     */
    @jakarta.annotation.Nullable
    public String getSt() {
        return st;
    }

    public void setSt(@jakarta.annotation.Nullable String st) {
        this.st = st;
    }

    public ConditionalOrderTradeUpdateSo fLowerCase(
            @jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
        return this;
    }

    /**
     * Get fLowerCase
     *
     * @return fLowerCase
     */
    @jakarta.annotation.Nullable
    public String getfLowerCase() {
        return fLowerCase;
    }

    public void setfLowerCase(@jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
    }

    public ConditionalOrderTradeUpdateSo qLowerCase(
            @jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public ConditionalOrderTradeUpdateSo pLowerCase(
            @jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public ConditionalOrderTradeUpdateSo sp(@jakarta.annotation.Nullable String sp) {
        this.sp = sp;
        return this;
    }

    /**
     * Get sp
     *
     * @return sp
     */
    @jakarta.annotation.Nullable
    public String getSp() {
        return sp;
    }

    public void setSp(@jakarta.annotation.Nullable String sp) {
        this.sp = sp;
    }

    public ConditionalOrderTradeUpdateSo os(@jakarta.annotation.Nullable String os) {
        this.os = os;
        return this;
    }

    /**
     * Get os
     *
     * @return os
     */
    @jakarta.annotation.Nullable
    public String getOs() {
        return os;
    }

    public void setOs(@jakarta.annotation.Nullable String os) {
        this.os = os;
    }

    public ConditionalOrderTradeUpdateSo T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    public ConditionalOrderTradeUpdateSo ut(@jakarta.annotation.Nullable Long ut) {
        this.ut = ut;
        return this;
    }

    /**
     * Get ut
     *
     * @return ut
     */
    @jakarta.annotation.Nullable
    public Long getUt() {
        return ut;
    }

    public void setUt(@jakarta.annotation.Nullable Long ut) {
        this.ut = ut;
    }

    public ConditionalOrderTradeUpdateSo R(@jakarta.annotation.Nullable Boolean R) {
        this.R = R;
        return this;
    }

    /**
     * Get R
     *
     * @return R
     */
    @jakarta.annotation.Nullable
    public Boolean getR() {
        return R;
    }

    public void setR(@jakarta.annotation.Nullable Boolean R) {
        this.R = R;
    }

    public ConditionalOrderTradeUpdateSo wt(@jakarta.annotation.Nullable String wt) {
        this.wt = wt;
        return this;
    }

    /**
     * Get wt
     *
     * @return wt
     */
    @jakarta.annotation.Nullable
    public String getWt() {
        return wt;
    }

    public void setWt(@jakarta.annotation.Nullable String wt) {
        this.wt = wt;
    }

    public ConditionalOrderTradeUpdateSo ps(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
        return this;
    }

    /**
     * Get ps
     *
     * @return ps
     */
    @jakarta.annotation.Nullable
    public String getPs() {
        return ps;
    }

    public void setPs(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
    }

    public ConditionalOrderTradeUpdateSo cp(@jakarta.annotation.Nullable Boolean cp) {
        this.cp = cp;
        return this;
    }

    /**
     * Get cp
     *
     * @return cp
     */
    @jakarta.annotation.Nullable
    public Boolean getCp() {
        return cp;
    }

    public void setCp(@jakarta.annotation.Nullable Boolean cp) {
        this.cp = cp;
    }

    public ConditionalOrderTradeUpdateSo AP(@jakarta.annotation.Nullable String AP) {
        this.AP = AP;
        return this;
    }

    /**
     * Get AP
     *
     * @return AP
     */
    @jakarta.annotation.Nullable
    public String getAP() {
        return AP;
    }

    public void setAP(@jakarta.annotation.Nullable String AP) {
        this.AP = AP;
    }

    public ConditionalOrderTradeUpdateSo cr(@jakarta.annotation.Nullable String cr) {
        this.cr = cr;
        return this;
    }

    /**
     * Get cr
     *
     * @return cr
     */
    @jakarta.annotation.Nullable
    public String getCr() {
        return cr;
    }

    public void setCr(@jakarta.annotation.Nullable String cr) {
        this.cr = cr;
    }

    public ConditionalOrderTradeUpdateSo iLowerCase(@jakarta.annotation.Nullable Long iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable Long iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    public ConditionalOrderTradeUpdateSo V(@jakarta.annotation.Nullable String V) {
        this.V = V;
        return this;
    }

    /**
     * Get V
     *
     * @return V
     */
    @jakarta.annotation.Nullable
    public String getV() {
        return V;
    }

    public void setV(@jakarta.annotation.Nullable String V) {
        this.V = V;
    }

    public ConditionalOrderTradeUpdateSo gtd(@jakarta.annotation.Nullable Long gtd) {
        this.gtd = gtd;
        return this;
    }

    /**
     * Get gtd
     *
     * @return gtd
     */
    @jakarta.annotation.Nullable
    public Long getGtd() {
        return gtd;
    }

    public void setGtd(@jakarta.annotation.Nullable Long gtd) {
        this.gtd = gtd;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConditionalOrderTradeUpdateSo conditionalOrderTradeUpdateSo =
                (ConditionalOrderTradeUpdateSo) o;
        return Objects.equals(this.sLowerCase, conditionalOrderTradeUpdateSo.sLowerCase)
                && Objects.equals(this.cLowerCase, conditionalOrderTradeUpdateSo.cLowerCase)
                && Objects.equals(this.si, conditionalOrderTradeUpdateSo.si)
                && Objects.equals(this.S, conditionalOrderTradeUpdateSo.S)
                && Objects.equals(this.st, conditionalOrderTradeUpdateSo.st)
                && Objects.equals(this.fLowerCase, conditionalOrderTradeUpdateSo.fLowerCase)
                && Objects.equals(this.qLowerCase, conditionalOrderTradeUpdateSo.qLowerCase)
                && Objects.equals(this.pLowerCase, conditionalOrderTradeUpdateSo.pLowerCase)
                && Objects.equals(this.sp, conditionalOrderTradeUpdateSo.sp)
                && Objects.equals(this.os, conditionalOrderTradeUpdateSo.os)
                && Objects.equals(this.T, conditionalOrderTradeUpdateSo.T)
                && Objects.equals(this.ut, conditionalOrderTradeUpdateSo.ut)
                && Objects.equals(this.R, conditionalOrderTradeUpdateSo.R)
                && Objects.equals(this.wt, conditionalOrderTradeUpdateSo.wt)
                && Objects.equals(this.ps, conditionalOrderTradeUpdateSo.ps)
                && Objects.equals(this.cp, conditionalOrderTradeUpdateSo.cp)
                && Objects.equals(this.AP, conditionalOrderTradeUpdateSo.AP)
                && Objects.equals(this.cr, conditionalOrderTradeUpdateSo.cr)
                && Objects.equals(this.iLowerCase, conditionalOrderTradeUpdateSo.iLowerCase)
                && Objects.equals(this.V, conditionalOrderTradeUpdateSo.V)
                && Objects.equals(this.gtd, conditionalOrderTradeUpdateSo.gtd);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sLowerCase,
                cLowerCase,
                si,
                S,
                st,
                fLowerCase,
                qLowerCase,
                pLowerCase,
                sp,
                os,
                T,
                ut,
                R,
                wt,
                ps,
                cp,
                AP,
                cr,
                iLowerCase,
                V,
                gtd);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ConditionalOrderTradeUpdateSo {\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("		si: ").append(toIndentedString(si)).append("\n");
        sb.append("		S: ").append(toIndentedString(S)).append("\n");
        sb.append("		st: ").append(toIndentedString(st)).append("\n");
        sb.append("		fLowerCase: ").append(toIndentedString(fLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		sp: ").append(toIndentedString(sp)).append("\n");
        sb.append("		os: ").append(toIndentedString(os)).append("\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("		ut: ").append(toIndentedString(ut)).append("\n");
        sb.append("		R: ").append(toIndentedString(R)).append("\n");
        sb.append("		wt: ").append(toIndentedString(wt)).append("\n");
        sb.append("		ps: ").append(toIndentedString(ps)).append("\n");
        sb.append("		cp: ").append(toIndentedString(cp)).append("\n");
        sb.append("		AP: ").append(toIndentedString(AP)).append("\n");
        sb.append("		cr: ").append(toIndentedString(cr)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("		V: ").append(toIndentedString(V)).append("\n");
        sb.append("		gtd: ").append(toIndentedString(gtd)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = cLowerCaseValue.toString();
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }
        Long siValue = getSi();
        if (siValue != null) {
            String siValueAsString = siValue.toString();
            valMap.put("si", siValueAsString);
        }
        String SValue = getS();
        if (SValue != null) {
            String SValueAsString = SValue.toString();
            valMap.put("S", SValueAsString);
        }
        String stValue = getSt();
        if (stValue != null) {
            String stValueAsString = stValue.toString();
            valMap.put("st", stValueAsString);
        }
        String fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            String fLowerCaseValueAsString = fLowerCaseValue.toString();
            valMap.put("fLowerCase", fLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String spValue = getSp();
        if (spValue != null) {
            String spValueAsString = spValue.toString();
            valMap.put("sp", spValueAsString);
        }
        String osValue = getOs();
        if (osValue != null) {
            String osValueAsString = osValue.toString();
            valMap.put("os", osValueAsString);
        }
        Long TValue = getT();
        if (TValue != null) {
            String TValueAsString = TValue.toString();
            valMap.put("T", TValueAsString);
        }
        Long utValue = getUt();
        if (utValue != null) {
            String utValueAsString = utValue.toString();
            valMap.put("ut", utValueAsString);
        }
        Boolean RValue = getR();
        if (RValue != null) {
            String RValueAsString = RValue.toString();
            valMap.put("R", RValueAsString);
        }
        String wtValue = getWt();
        if (wtValue != null) {
            String wtValueAsString = wtValue.toString();
            valMap.put("wt", wtValueAsString);
        }
        String psValue = getPs();
        if (psValue != null) {
            String psValueAsString = psValue.toString();
            valMap.put("ps", psValueAsString);
        }
        Boolean cpValue = getCp();
        if (cpValue != null) {
            String cpValueAsString = cpValue.toString();
            valMap.put("cp", cpValueAsString);
        }
        String APValue = getAP();
        if (APValue != null) {
            String APValueAsString = APValue.toString();
            valMap.put("AP", APValueAsString);
        }
        String crValue = getCr();
        if (crValue != null) {
            String crValueAsString = crValue.toString();
            valMap.put("cr", crValueAsString);
        }
        Long iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }
        String VValue = getV();
        if (VValue != null) {
            String VValueAsString = VValue.toString();
            valMap.put("V", VValueAsString);
        }
        Long gtdValue = getGtd();
        if (gtdValue != null) {
            String gtdValueAsString = gtdValue.toString();
            valMap.put("gtd", gtdValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }
        Object siValue = getSi();
        if (siValue != null) {
            valMap.put("si", siValue);
        }
        Object SValue = getS();
        if (SValue != null) {
            valMap.put("S", SValue);
        }
        Object stValue = getSt();
        if (stValue != null) {
            valMap.put("st", stValue);
        }
        Object fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            valMap.put("fLowerCase", fLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object spValue = getSp();
        if (spValue != null) {
            valMap.put("sp", spValue);
        }
        Object osValue = getOs();
        if (osValue != null) {
            valMap.put("os", osValue);
        }
        Object TValue = getT();
        if (TValue != null) {
            valMap.put("T", TValue);
        }
        Object utValue = getUt();
        if (utValue != null) {
            valMap.put("ut", utValue);
        }
        Object RValue = getR();
        if (RValue != null) {
            valMap.put("R", RValue);
        }
        Object wtValue = getWt();
        if (wtValue != null) {
            valMap.put("wt", wtValue);
        }
        Object psValue = getPs();
        if (psValue != null) {
            valMap.put("ps", psValue);
        }
        Object cpValue = getCp();
        if (cpValue != null) {
            valMap.put("cp", cpValue);
        }
        Object APValue = getAP();
        if (APValue != null) {
            valMap.put("AP", APValue);
        }
        Object crValue = getCr();
        if (crValue != null) {
            valMap.put("cr", crValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }
        Object VValue = getV();
        if (VValue != null) {
            valMap.put("V", VValue);
        }
        Object gtdValue = getGtd();
        if (gtdValue != null) {
            valMap.put("gtd", gtdValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("s");
        openapiFields.add("c");
        openapiFields.add("si");
        openapiFields.add("S");
        openapiFields.add("st");
        openapiFields.add("f");
        openapiFields.add("q");
        openapiFields.add("p");
        openapiFields.add("sp");
        openapiFields.add("os");
        openapiFields.add("T");
        openapiFields.add("ut");
        openapiFields.add("R");
        openapiFields.add("wt");
        openapiFields.add("ps");
        openapiFields.add("cp");
        openapiFields.add("AP");
        openapiFields.add("cr");
        openapiFields.add("i");
        openapiFields.add("V");
        openapiFields.add("gtd");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ConditionalOrderTradeUpdateSo
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ConditionalOrderTradeUpdateSo.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ConditionalOrderTradeUpdateSo is not"
                                        + " found in the empty JSON string",
                                ConditionalOrderTradeUpdateSo.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ConditionalOrderTradeUpdateSo.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ConditionalOrderTradeUpdateSo` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull())
                && !jsonObj.get("c").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `c` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("c").toString()));
        }
        if ((jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull())
                && !jsonObj.get("S").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `S` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("S").toString()));
        }
        if ((jsonObj.get("st") != null && !jsonObj.get("st").isJsonNull())
                && !jsonObj.get("st").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `st` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("st").toString()));
        }
        if ((jsonObj.get("f") != null && !jsonObj.get("f").isJsonNull())
                && !jsonObj.get("f").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `f` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("f").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("sp") != null && !jsonObj.get("sp").isJsonNull())
                && !jsonObj.get("sp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sp` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("sp").toString()));
        }
        if ((jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull())
                && !jsonObj.get("os").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `os` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("os").toString()));
        }
        if ((jsonObj.get("wt") != null && !jsonObj.get("wt").isJsonNull())
                && !jsonObj.get("wt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `wt` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("wt").toString()));
        }
        if ((jsonObj.get("ps") != null && !jsonObj.get("ps").isJsonNull())
                && !jsonObj.get("ps").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ps` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ps").toString()));
        }
        if ((jsonObj.get("AP") != null && !jsonObj.get("AP").isJsonNull())
                && !jsonObj.get("AP").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `AP` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("AP").toString()));
        }
        if ((jsonObj.get("cr") != null && !jsonObj.get("cr").isJsonNull())
                && !jsonObj.get("cr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cr` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("cr").toString()));
        }
        if ((jsonObj.get("V") != null && !jsonObj.get("V").isJsonNull())
                && !jsonObj.get("V").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `V` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("V").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ConditionalOrderTradeUpdateSo.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ConditionalOrderTradeUpdateSo' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ConditionalOrderTradeUpdateSo> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ConditionalOrderTradeUpdateSo.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ConditionalOrderTradeUpdateSo>() {
                        @Override
                        public void write(JsonWriter out, ConditionalOrderTradeUpdateSo value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ConditionalOrderTradeUpdateSo read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ConditionalOrderTradeUpdateSo given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ConditionalOrderTradeUpdateSo
     * @throws IOException if the JSON string is invalid with respect to
     *     ConditionalOrderTradeUpdateSo
     */
    public static ConditionalOrderTradeUpdateSo fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ConditionalOrderTradeUpdateSo.class);
    }

    /**
     * Convert an instance of ConditionalOrderTradeUpdateSo to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

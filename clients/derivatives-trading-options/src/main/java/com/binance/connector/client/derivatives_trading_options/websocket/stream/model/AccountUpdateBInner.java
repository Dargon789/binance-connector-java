/*
 * Binance Derivatives Trading Options WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Options WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_options.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountUpdateBInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountUpdateBInner extends BaseDTO {
    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String bLowerCase;

    public static final String SERIALIZED_NAME_M_LOWER_CASE = "m";

    @SerializedName(SERIALIZED_NAME_M_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String mLowerCase;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String uLowerCase;

    public static final String SERIALIZED_NAME_U = "U";

    @SerializedName(SERIALIZED_NAME_U)
    @jakarta.annotation.Nullable
    private Long U;

    public static final String SERIALIZED_NAME_M = "M";

    @SerializedName(SERIALIZED_NAME_M)
    @jakarta.annotation.Nullable
    private String M;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String iLowerCase;

    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String aLowerCase;

    public AccountUpdateBInner() {}

    public AccountUpdateBInner bLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    public String getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public AccountUpdateBInner mLowerCase(@jakarta.annotation.Nullable String mLowerCase) {
        this.mLowerCase = mLowerCase;
        return this;
    }

    /**
     * Get mLowerCase
     *
     * @return mLowerCase
     */
    @jakarta.annotation.Nullable
    public String getmLowerCase() {
        return mLowerCase;
    }

    public void setmLowerCase(@jakarta.annotation.Nullable String mLowerCase) {
        this.mLowerCase = mLowerCase;
    }

    public AccountUpdateBInner uLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public String getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public AccountUpdateBInner U(@jakarta.annotation.Nullable Long U) {
        this.U = U;
        return this;
    }

    /**
     * Get U
     *
     * @return U
     */
    @jakarta.annotation.Nullable
    public Long getU() {
        return U;
    }

    public void setU(@jakarta.annotation.Nullable Long U) {
        this.U = U;
    }

    public AccountUpdateBInner M(@jakarta.annotation.Nullable String M) {
        this.M = M;
        return this;
    }

    /**
     * Get M
     *
     * @return M
     */
    @jakarta.annotation.Nullable
    public String getM() {
        return M;
    }

    public void setM(@jakarta.annotation.Nullable String M) {
        this.M = M;
    }

    public AccountUpdateBInner iLowerCase(@jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public String getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    public AccountUpdateBInner aLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    public String getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountUpdateBInner accountUpdateBInner = (AccountUpdateBInner) o;
        return Objects.equals(this.bLowerCase, accountUpdateBInner.bLowerCase)
                && Objects.equals(this.mLowerCase, accountUpdateBInner.mLowerCase)
                && Objects.equals(this.uLowerCase, accountUpdateBInner.uLowerCase)
                && Objects.equals(this.U, accountUpdateBInner.U)
                && Objects.equals(this.M, accountUpdateBInner.M)
                && Objects.equals(this.iLowerCase, accountUpdateBInner.iLowerCase)
                && Objects.equals(this.aLowerCase, accountUpdateBInner.aLowerCase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bLowerCase, mLowerCase, uLowerCase, U, M, iLowerCase, aLowerCase);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountUpdateBInner {\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		mLowerCase: ").append(toIndentedString(mLowerCase)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		U: ").append(toIndentedString(U)).append("\n");
        sb.append("		M: ").append(toIndentedString(M)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = bLowerCaseValue.toString();
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        String mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            String mLowerCaseValueAsString = mLowerCaseValue.toString();
            valMap.put("mLowerCase", mLowerCaseValueAsString);
        }
        String uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            String uLowerCaseValueAsString = uLowerCaseValue.toString();
            valMap.put("uLowerCase", uLowerCaseValueAsString);
        }
        Long UValue = getU();
        if (UValue != null) {
            String UValueAsString = UValue.toString();
            valMap.put("U", UValueAsString);
        }
        String MValue = getM();
        if (MValue != null) {
            String MValueAsString = MValue.toString();
            valMap.put("M", MValueAsString);
        }
        String iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }
        String aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = aLowerCaseValue.toString();
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            valMap.put("mLowerCase", mLowerCaseValue);
        }
        Object uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            valMap.put("uLowerCase", uLowerCaseValue);
        }
        Object UValue = getU();
        if (UValue != null) {
            valMap.put("U", UValue);
        }
        Object MValue = getM();
        if (MValue != null) {
            valMap.put("M", MValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("b");
        openapiFields.add("m");
        openapiFields.add("u");
        openapiFields.add("U");
        openapiFields.add("M");
        openapiFields.add("i");
        openapiFields.add("a");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccountUpdateBInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountUpdateBInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountUpdateBInner is not found in"
                                        + " the empty JSON string",
                                AccountUpdateBInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountUpdateBInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountUpdateBInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("b") != null && !jsonObj.get("b").isJsonNull())
                && !jsonObj.get("b").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("b").toString()));
        }
        if ((jsonObj.get("m") != null && !jsonObj.get("m").isJsonNull())
                && !jsonObj.get("m").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `m` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("m").toString()));
        }
        if ((jsonObj.get("u") != null && !jsonObj.get("u").isJsonNull())
                && !jsonObj.get("u").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `u` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("u").toString()));
        }
        if ((jsonObj.get("M") != null && !jsonObj.get("M").isJsonNull())
                && !jsonObj.get("M").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `M` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("M").toString()));
        }
        if ((jsonObj.get("i") != null && !jsonObj.get("i").isJsonNull())
                && !jsonObj.get("i").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `i` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("i").toString()));
        }
        if ((jsonObj.get("a") != null && !jsonObj.get("a").isJsonNull())
                && !jsonObj.get("a").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("a").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountUpdateBInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountUpdateBInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountUpdateBInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountUpdateBInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountUpdateBInner>() {
                        @Override
                        public void write(JsonWriter out, AccountUpdateBInner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountUpdateBInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountUpdateBInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountUpdateBInner
     * @throws IOException if the JSON string is invalid with respect to AccountUpdateBInner
     */
    public static AccountUpdateBInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountUpdateBInner.class);
    }

    /**
     * Convert an instance of AccountUpdateBInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

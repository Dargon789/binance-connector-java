/*
 * Binance Derivatives Trading COIN Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountUpdateABInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountUpdateABInner extends BaseDTO {
    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String aLowerCase;

    public static final String SERIALIZED_NAME_WB = "wb";

    @SerializedName(SERIALIZED_NAME_WB)
    @jakarta.annotation.Nullable
    private String wb;

    public static final String SERIALIZED_NAME_CW = "cw";

    @SerializedName(SERIALIZED_NAME_CW)
    @jakarta.annotation.Nullable
    private String cw;

    public static final String SERIALIZED_NAME_BC = "bc";

    @SerializedName(SERIALIZED_NAME_BC)
    @jakarta.annotation.Nullable
    private String bc;

    public AccountUpdateABInner() {}

    public AccountUpdateABInner aLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    public String getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    public AccountUpdateABInner wb(@jakarta.annotation.Nullable String wb) {
        this.wb = wb;
        return this;
    }

    /**
     * Get wb
     *
     * @return wb
     */
    @jakarta.annotation.Nullable
    public String getWb() {
        return wb;
    }

    public void setWb(@jakarta.annotation.Nullable String wb) {
        this.wb = wb;
    }

    public AccountUpdateABInner cw(@jakarta.annotation.Nullable String cw) {
        this.cw = cw;
        return this;
    }

    /**
     * Get cw
     *
     * @return cw
     */
    @jakarta.annotation.Nullable
    public String getCw() {
        return cw;
    }

    public void setCw(@jakarta.annotation.Nullable String cw) {
        this.cw = cw;
    }

    public AccountUpdateABInner bc(@jakarta.annotation.Nullable String bc) {
        this.bc = bc;
        return this;
    }

    /**
     * Get bc
     *
     * @return bc
     */
    @jakarta.annotation.Nullable
    public String getBc() {
        return bc;
    }

    public void setBc(@jakarta.annotation.Nullable String bc) {
        this.bc = bc;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountUpdateABInner accountUpdateABInner = (AccountUpdateABInner) o;
        return Objects.equals(this.aLowerCase, accountUpdateABInner.aLowerCase)
                && Objects.equals(this.wb, accountUpdateABInner.wb)
                && Objects.equals(this.cw, accountUpdateABInner.cw)
                && Objects.equals(this.bc, accountUpdateABInner.bc);
    }

    @Override
    public int hashCode() {
        return Objects.hash(aLowerCase, wb, cw, bc);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountUpdateABInner {\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("		wb: ").append(toIndentedString(wb)).append("\n");
        sb.append("		cw: ").append(toIndentedString(cw)).append("\n");
        sb.append("		bc: ").append(toIndentedString(bc)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = aLowerCaseValue.toString();
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }
        String wbValue = getWb();
        if (wbValue != null) {
            String wbValueAsString = wbValue.toString();
            valMap.put("wb", wbValueAsString);
        }
        String cwValue = getCw();
        if (cwValue != null) {
            String cwValueAsString = cwValue.toString();
            valMap.put("cw", cwValueAsString);
        }
        String bcValue = getBc();
        if (bcValue != null) {
            String bcValueAsString = bcValue.toString();
            valMap.put("bc", bcValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }
        Object wbValue = getWb();
        if (wbValue != null) {
            valMap.put("wb", wbValue);
        }
        Object cwValue = getCw();
        if (cwValue != null) {
            valMap.put("cw", cwValue);
        }
        Object bcValue = getBc();
        if (bcValue != null) {
            valMap.put("bc", bcValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("a");
        openapiFields.add("wb");
        openapiFields.add("cw");
        openapiFields.add("bc");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccountUpdateABInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountUpdateABInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountUpdateABInner is not found in"
                                        + " the empty JSON string",
                                AccountUpdateABInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountUpdateABInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountUpdateABInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("a") != null && !jsonObj.get("a").isJsonNull())
                && !jsonObj.get("a").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("a").toString()));
        }
        if ((jsonObj.get("wb") != null && !jsonObj.get("wb").isJsonNull())
                && !jsonObj.get("wb").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `wb` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("wb").toString()));
        }
        if ((jsonObj.get("cw") != null && !jsonObj.get("cw").isJsonNull())
                && !jsonObj.get("cw").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cw` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("cw").toString()));
        }
        if ((jsonObj.get("bc") != null && !jsonObj.get("bc").isJsonNull())
                && !jsonObj.get("bc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bc` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("bc").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountUpdateABInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountUpdateABInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountUpdateABInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountUpdateABInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountUpdateABInner>() {
                        @Override
                        public void write(JsonWriter out, AccountUpdateABInner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountUpdateABInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountUpdateABInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountUpdateABInner
     * @throws IOException if the JSON string is invalid with respect to AccountUpdateABInner
     */
    public static AccountUpdateABInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountUpdateABInner.class);
    }

    /**
     * Convert an instance of AccountUpdateABInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

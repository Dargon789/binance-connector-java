/*
 * Binance Derivatives Trading COIN Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.websocket.stream.model;

import com.binance.connector.client.common.AbstractOpenApiSchema;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.validator.constraints.*;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class UserDataStreamEventsResponse extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(UserDataStreamEventsResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UserDataStreamEventsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UserDataStreamEventsResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountConfigUpdate> adapterAccountConfigUpdate =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountConfigUpdate.class));
            final TypeAdapter<AccountUpdate> adapterAccountUpdate =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountUpdate.class));
            final TypeAdapter<GridUpdate> adapterGridUpdate =
                    gson.getDelegateAdapter(this, TypeToken.get(GridUpdate.class));
            final TypeAdapter<MarginCall> adapterMarginCall =
                    gson.getDelegateAdapter(this, TypeToken.get(MarginCall.class));
            final TypeAdapter<OrderTradeUpdate> adapterOrderTradeUpdate =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderTradeUpdate.class));
            final TypeAdapter<StrategyUpdate> adapterStrategyUpdate =
                    gson.getDelegateAdapter(this, TypeToken.get(StrategyUpdate.class));
            final TypeAdapter<Listenkeyexpired> adapterListenkeyexpired =
                    gson.getDelegateAdapter(this, TypeToken.get(Listenkeyexpired.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UserDataStreamEventsResponse>() {
                        @Override
                        public void write(JsonWriter out, UserDataStreamEventsResponse value)
                                throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `AccountConfigUpdate`
                            if (value.getActualInstance() instanceof AccountConfigUpdate) {
                                JsonElement element =
                                        adapterAccountConfigUpdate.toJsonTree(
                                                (AccountConfigUpdate) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `AccountUpdate`
                            if (value.getActualInstance() instanceof AccountUpdate) {
                                JsonElement element =
                                        adapterAccountUpdate.toJsonTree(
                                                (AccountUpdate) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `GridUpdate`
                            if (value.getActualInstance() instanceof GridUpdate) {
                                JsonElement element =
                                        adapterGridUpdate.toJsonTree(
                                                (GridUpdate) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `MarginCall`
                            if (value.getActualInstance() instanceof MarginCall) {
                                JsonElement element =
                                        adapterMarginCall.toJsonTree(
                                                (MarginCall) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `OrderTradeUpdate`
                            if (value.getActualInstance() instanceof OrderTradeUpdate) {
                                JsonElement element =
                                        adapterOrderTradeUpdate.toJsonTree(
                                                (OrderTradeUpdate) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `StrategyUpdate`
                            if (value.getActualInstance() instanceof StrategyUpdate) {
                                JsonElement element =
                                        adapterStrategyUpdate.toJsonTree(
                                                (StrategyUpdate) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `Listenkeyexpired`
                            if (value.getActualInstance() instanceof Listenkeyexpired) {
                                JsonElement element =
                                        adapterListenkeyexpired.toJsonTree(
                                                (Listenkeyexpired) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " AccountConfigUpdate, AccountUpdate, GridUpdate,"
                                            + " Listenkeyexpired, MarginCall, OrderTradeUpdate,"
                                            + " StrategyUpdate");
                        }

                        @Override
                        public UserDataStreamEventsResponse read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            JsonObject jsonObject = jsonElement.getAsJsonObject();

                            // use discriminator value for faster oneOf lookup
                            UserDataStreamEventsResponse newUserDataStreamEventsResponse =
                                    new UserDataStreamEventsResponse();
                            if (jsonObject.get("e") == null) {
                                log.log(
                                        Level.WARNING,
                                        "Failed to lookup discriminator value for"
                                            + " UserDataStreamEventsResponse as `e` was not found"
                                            + " in the payload or the payload is empty.");
                            } else {
                                // look up the discriminator value in the field `e`
                                switch (jsonObject.get("e").getAsString()) {
                                    case "ACCOUNT_CONFIG_UPDATE":
                                        deserialized =
                                                adapterAccountConfigUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "ACCOUNT_UPDATE":
                                        deserialized =
                                                adapterAccountUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "GRID_UPDATE":
                                        deserialized = adapterGridUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "MARGIN_CALL":
                                        deserialized = adapterMarginCall.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "ORDER_TRADE_UPDATE":
                                        deserialized =
                                                adapterOrderTradeUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "STRATEGY_UPDATE":
                                        deserialized =
                                                adapterStrategyUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "listenKeyExpired":
                                        deserialized =
                                                adapterListenkeyexpired.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "accountConfigUpdate":
                                        deserialized =
                                                adapterAccountConfigUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "accountUpdate":
                                        deserialized =
                                                adapterAccountUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "gridUpdate":
                                        deserialized = adapterGridUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "listenkeyexpired":
                                        deserialized =
                                                adapterListenkeyexpired.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "marginCall":
                                        deserialized = adapterMarginCall.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "orderTradeUpdate":
                                        deserialized =
                                                adapterOrderTradeUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    case "strategyUpdate":
                                        deserialized =
                                                adapterStrategyUpdate.fromJsonTree(jsonObject);
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newUserDataStreamEventsResponse;
                                    default:
                                        newUserDataStreamEventsResponse.setActualInstance(
                                                jsonElement.toString());
                                        log.log(
                                                Level.WARNING,
                                                String.format(
                                                        "Failed to lookup discriminator value `%s`"
                                                            + " for UserDataStreamEventsResponse."
                                                            + " Possible values:"
                                                            + " ACCOUNT_CONFIG_UPDATE"
                                                            + " ACCOUNT_UPDATE GRID_UPDATE"
                                                            + " MARGIN_CALL ORDER_TRADE_UPDATE"
                                                            + " STRATEGY_UPDATE listenKeyExpired"
                                                            + " accountConfigUpdate accountUpdate"
                                                            + " gridUpdate listenkeyexpired"
                                                            + " marginCall orderTradeUpdate"
                                                            + " strategyUpdate. Falling back to"
                                                            + " String.",
                                                        jsonObject.get("e").getAsString()));
                                }
                            }

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize AccountConfigUpdate
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AccountConfigUpdate.validateJsonElement(jsonElement);
                                actualAdapter = adapterAccountConfigUpdate;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'AccountConfigUpdate'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AccountConfigUpdate failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AccountConfigUpdate'",
                                        e);
                            }
                            // deserialize AccountUpdate
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AccountUpdate.validateJsonElement(jsonElement);
                                actualAdapter = adapterAccountUpdate;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'AccountUpdate'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AccountUpdate failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AccountUpdate'",
                                        e);
                            }
                            // deserialize GridUpdate
                            try {
                                // validate the JSON object to see if any exception is thrown
                                GridUpdate.validateJsonElement(jsonElement);
                                actualAdapter = adapterGridUpdate;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'GridUpdate'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for GridUpdate failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'GridUpdate'",
                                        e);
                            }
                            // deserialize MarginCall
                            try {
                                // validate the JSON object to see if any exception is thrown
                                MarginCall.validateJsonElement(jsonElement);
                                actualAdapter = adapterMarginCall;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'MarginCall'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for MarginCall failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'MarginCall'",
                                        e);
                            }
                            // deserialize OrderTradeUpdate
                            try {
                                // validate the JSON object to see if any exception is thrown
                                OrderTradeUpdate.validateJsonElement(jsonElement);
                                actualAdapter = adapterOrderTradeUpdate;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'OrderTradeUpdate'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for OrderTradeUpdate failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'OrderTradeUpdate'",
                                        e);
                            }
                            // deserialize StrategyUpdate
                            try {
                                // validate the JSON object to see if any exception is thrown
                                StrategyUpdate.validateJsonElement(jsonElement);
                                actualAdapter = adapterStrategyUpdate;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'StrategyUpdate'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for StrategyUpdate failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'StrategyUpdate'",
                                        e);
                            }
                            // deserialize Listenkeyexpired
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Listenkeyexpired.validateJsonElement(jsonElement);
                                actualAdapter = adapterListenkeyexpired;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'Listenkeyexpired'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Listenkeyexpired failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Listenkeyexpired'",
                                        e);
                            }

                            if (match == 1) {
                                UserDataStreamEventsResponse ret =
                                        new UserDataStreamEventsResponse();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for"
                                                + " UserDataStreamEventsResponse: %d classes match"
                                                + " result, expected 1. Detailed failure message"
                                                + " for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UserDataStreamEventsResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public UserDataStreamEventsResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccountConfigUpdate", AccountConfigUpdate.class);
        schemas.put("AccountUpdate", AccountUpdate.class);
        schemas.put("GridUpdate", GridUpdate.class);
        schemas.put("MarginCall", MarginCall.class);
        schemas.put("OrderTradeUpdate", OrderTradeUpdate.class);
        schemas.put("StrategyUpdate", StrategyUpdate.class);
        schemas.put("Listenkeyexpired", Listenkeyexpired.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UserDataStreamEventsResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: AccountConfigUpdate, AccountUpdate, GridUpdate,
     * Listenkeyexpired, MarginCall, OrderTradeUpdate, StrategyUpdate
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccountConfigUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccountUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GridUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MarginCall) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OrderTradeUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StrategyUpdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Listenkeyexpired) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be AccountConfigUpdate, AccountUpdate, GridUpdate,"
                        + " Listenkeyexpired, MarginCall, OrderTradeUpdate, StrategyUpdate");
    }

    /**
     * Get the actual instance, which can be the following: AccountConfigUpdate, AccountUpdate,
     * GridUpdate, Listenkeyexpired, MarginCall, OrderTradeUpdate, StrategyUpdate
     *
     * @return The actual instance (AccountConfigUpdate, AccountUpdate, GridUpdate,
     *     Listenkeyexpired, MarginCall, OrderTradeUpdate, StrategyUpdate)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccountConfigUpdate`. If the actual instance is not
     * `AccountConfigUpdate`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountConfigUpdate`
     * @throws ClassCastException if the instance is not `AccountConfigUpdate`
     */
    public AccountConfigUpdate getAccountConfigUpdate() throws ClassCastException {
        return (AccountConfigUpdate) super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccountUpdate`. If the actual instance is not `AccountUpdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountUpdate`
     * @throws ClassCastException if the instance is not `AccountUpdate`
     */
    public AccountUpdate getAccountUpdate() throws ClassCastException {
        return (AccountUpdate) super.getActualInstance();
    }

    /**
     * Get the actual instance of `GridUpdate`. If the actual instance is not `GridUpdate`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `GridUpdate`
     * @throws ClassCastException if the instance is not `GridUpdate`
     */
    public GridUpdate getGridUpdate() throws ClassCastException {
        return (GridUpdate) super.getActualInstance();
    }

    /**
     * Get the actual instance of `MarginCall`. If the actual instance is not `MarginCall`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `MarginCall`
     * @throws ClassCastException if the instance is not `MarginCall`
     */
    public MarginCall getMarginCall() throws ClassCastException {
        return (MarginCall) super.getActualInstance();
    }

    /**
     * Get the actual instance of `OrderTradeUpdate`. If the actual instance is not
     * `OrderTradeUpdate`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `OrderTradeUpdate`
     * @throws ClassCastException if the instance is not `OrderTradeUpdate`
     */
    public OrderTradeUpdate getOrderTradeUpdate() throws ClassCastException {
        return (OrderTradeUpdate) super.getActualInstance();
    }

    /**
     * Get the actual instance of `StrategyUpdate`. If the actual instance is not `StrategyUpdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StrategyUpdate`
     * @throws ClassCastException if the instance is not `StrategyUpdate`
     */
    public StrategyUpdate getStrategyUpdate() throws ClassCastException {
        return (StrategyUpdate) super.getActualInstance();
    }

    /**
     * Get the actual instance of `Listenkeyexpired`. If the actual instance is not
     * `Listenkeyexpired`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `Listenkeyexpired`
     * @throws ClassCastException if the instance is not `Listenkeyexpired`
     */
    public Listenkeyexpired getListenkeyexpired() throws ClassCastException {
        return (Listenkeyexpired) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UserDataStreamEventsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AccountConfigUpdate
        try {
            AccountConfigUpdate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AccountConfigUpdate failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccountUpdate
        try {
            AccountUpdate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AccountUpdate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GridUpdate
        try {
            GridUpdate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for GridUpdate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MarginCall
        try {
            MarginCall.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for MarginCall failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OrderTradeUpdate
        try {
            OrderTradeUpdate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for OrderTradeUpdate failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with StrategyUpdate
        try {
            StrategyUpdate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for StrategyUpdate failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Listenkeyexpired
        try {
            Listenkeyexpired.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Listenkeyexpired failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for UserDataStreamEventsResponse with oneOf"
                                + " schemas: AccountConfigUpdate, AccountUpdate, GridUpdate,"
                                + " Listenkeyexpired, MarginCall, OrderTradeUpdate, StrategyUpdate."
                                + " %d class(es) match the result, expected 1. Detailed failure"
                                + " message for oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UserDataStreamEventsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UserDataStreamEventsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     UserDataStreamEventsResponse
     */
    public static UserDataStreamEventsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UserDataStreamEventsResponse.class);
    }

    /**
     * Convert an instance of UserDataStreamEventsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** TopTraderLongShortRatioAccountsResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class TopTraderLongShortRatioAccountsResponse
        extends ArrayList<TopTraderLongShortRatioAccountsResponseInner> {
    public TopTraderLongShortRatioAccountsResponse() {}

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TopTraderLongShortRatioAccountsResponse {\n");
        sb.append("		").append(toIndentedString(super.toString())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     TopTraderLongShortRatioAccountsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (!jsonElement.isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected json element to be a array type in the JSON string but got"
                                    + " `%s`",
                            jsonElement.toString()));
        }
        JsonArray array = jsonElement.getAsJsonArray();
        // validate array items
        for (JsonElement element : array) {
            TopTraderLongShortRatioAccountsResponseInner.validateJsonElement(element);
        }
        if (jsonElement == null) {
            if (!TopTraderLongShortRatioAccountsResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " TopTraderLongShortRatioAccountsResponse is not found in the"
                                    + " empty JSON string",
                                TopTraderLongShortRatioAccountsResponse.openapiRequiredFields
                                        .toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TopTraderLongShortRatioAccountsResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'TopTraderLongShortRatioAccountsResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TopTraderLongShortRatioAccountsResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(TopTraderLongShortRatioAccountsResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TopTraderLongShortRatioAccountsResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, TopTraderLongShortRatioAccountsResponse value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonArray();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public TopTraderLongShortRatioAccountsResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of TopTraderLongShortRatioAccountsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TopTraderLongShortRatioAccountsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     TopTraderLongShortRatioAccountsResponse
     */
    public static TopTraderLongShortRatioAccountsResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, TopTraderLongShortRatioAccountsResponse.class);
    }

    /**
     * Convert an instance of TopTraderLongShortRatioAccountsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

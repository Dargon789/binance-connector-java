/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner {
    public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";

    @SerializedName(SERIALIZED_NAME_IS_LOCKED)
    @jakarta.annotation.Nullable
    private Boolean isLocked;

    public static final String SERIALIZED_NAME_PLANNED_RECOVER_TIME = "plannedRecoverTime";

    @SerializedName(SERIALIZED_NAME_PLANNED_RECOVER_TIME)
    @jakarta.annotation.Nullable
    private Long plannedRecoverTime;

    public static final String SERIALIZED_NAME_INDICATOR = "indicator";

    @SerializedName(SERIALIZED_NAME_INDICATOR)
    @jakarta.annotation.Nullable
    private String indicator;

    public static final String SERIALIZED_NAME_VALUE = "value";

    @SerializedName(SERIALIZED_NAME_VALUE)
    @jakarta.annotation.Nullable
    private Double value;

    public static final String SERIALIZED_NAME_TRIGGER_VALUE = "triggerValue";

    @SerializedName(SERIALIZED_NAME_TRIGGER_VALUE)
    @jakarta.annotation.Nullable
    private Double triggerValue;

    public FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner() {}

    public FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner isLocked(
            @jakarta.annotation.Nullable Boolean isLocked) {
        this.isLocked = isLocked;
        return this;
    }

    /**
     * Get isLocked
     *
     * @return isLocked
     */
    @jakarta.annotation.Nullable
    public Boolean getIsLocked() {
        return isLocked;
    }

    public void setIsLocked(@jakarta.annotation.Nullable Boolean isLocked) {
        this.isLocked = isLocked;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
            plannedRecoverTime(@jakarta.annotation.Nullable Long plannedRecoverTime) {
        this.plannedRecoverTime = plannedRecoverTime;
        return this;
    }

    /**
     * Get plannedRecoverTime
     *
     * @return plannedRecoverTime
     */
    @jakarta.annotation.Nullable
    public Long getPlannedRecoverTime() {
        return plannedRecoverTime;
    }

    public void setPlannedRecoverTime(@jakarta.annotation.Nullable Long plannedRecoverTime) {
        this.plannedRecoverTime = plannedRecoverTime;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner indicator(
            @jakarta.annotation.Nullable String indicator) {
        this.indicator = indicator;
        return this;
    }

    /**
     * Get indicator
     *
     * @return indicator
     */
    @jakarta.annotation.Nullable
    public String getIndicator() {
        return indicator;
    }

    public void setIndicator(@jakarta.annotation.Nullable String indicator) {
        this.indicator = indicator;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner value(
            @jakarta.annotation.Nullable Double value) {
        this.value = value;
        return this;
    }

    /**
     * Get value
     *
     * @return value
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getValue() {
        return value;
    }

    public void setValue(@jakarta.annotation.Nullable Double value) {
        this.value = value;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner triggerValue(
            @jakarta.annotation.Nullable Double triggerValue) {
        this.triggerValue = triggerValue;
        return this;
    }

    /**
     * Get triggerValue
     *
     * @return triggerValue
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getTriggerValue() {
        return triggerValue;
    }

    public void setTriggerValue(@jakarta.annotation.Nullable Double triggerValue) {
        this.triggerValue = triggerValue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                futuresTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner =
                        (FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner) o;
        return Objects.equals(
                        this.isLocked,
                        futuresTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                .isLocked)
                && Objects.equals(
                        this.plannedRecoverTime,
                        futuresTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                .plannedRecoverTime)
                && Objects.equals(
                        this.indicator,
                        futuresTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                .indicator)
                && Objects.equals(
                        this.value,
                        futuresTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                .value)
                && Objects.equals(
                        this.triggerValue,
                        futuresTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                .triggerValue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(isLocked, plannedRecoverTime, indicator, value, triggerValue);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner"
                        + " {\n");
        sb.append("		isLocked: ").append(toIndentedString(isLocked)).append("\n");
        sb.append("		plannedRecoverTime: ")
                .append(toIndentedString(plannedRecoverTime))
                .append("\n");
        sb.append("		indicator: ").append(toIndentedString(indicator)).append("\n");
        sb.append("		value: ").append(toIndentedString(value)).append("\n");
        sb.append("		triggerValue: ").append(toIndentedString(triggerValue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object isLockedValue = getIsLocked();
        String isLockedValueAsString = "";
        isLockedValueAsString = isLockedValue.toString();
        sb.append("isLocked=").append(urlEncode(isLockedValueAsString)).append("");
        Object plannedRecoverTimeValue = getPlannedRecoverTime();
        String plannedRecoverTimeValueAsString = "";
        plannedRecoverTimeValueAsString = plannedRecoverTimeValue.toString();
        sb.append("plannedRecoverTime=")
                .append(urlEncode(plannedRecoverTimeValueAsString))
                .append("");
        Object indicatorValue = getIndicator();
        String indicatorValueAsString = "";
        indicatorValueAsString = indicatorValue.toString();
        sb.append("indicator=").append(urlEncode(indicatorValueAsString)).append("");
        Object valueValue = getValue();
        String valueValueAsString = "";
        valueValueAsString = valueValue.toString();
        sb.append("value=").append(urlEncode(valueValueAsString)).append("");
        Object triggerValueValue = getTriggerValue();
        String triggerValueValueAsString = "";
        triggerValueValueAsString = triggerValueValue.toString();
        sb.append("triggerValue=").append(urlEncode(triggerValueValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("isLocked");
        openapiFields.add("plannedRecoverTime");
        openapiFields.add("indicator");
        openapiFields.add("value");
        openapiFields.add("triggerValue");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner"
                                    + " is not found in the empty JSON string",
                                FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("indicator") != null && !jsonObj.get("indicator").isJsonNull())
                && !jsonObj.get("indicator").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `indicator` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("indicator").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                        value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
     * given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of
     *     FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
     * @throws IOException if the JSON string is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
     */
    public static FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner
                                .class);
    }

    /**
     * Convert an instance of
     * FuturesTradingQuantitativeRulesIndicatorsResponseIndicatorsBTCUSDTInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountUpdateAPInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountUpdateAPInner extends BaseDTO {
    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_PA = "pa";

    @SerializedName(SERIALIZED_NAME_PA)
    @jakarta.annotation.Nullable
    private String pa;

    public static final String SERIALIZED_NAME_EP = "ep";

    @SerializedName(SERIALIZED_NAME_EP)
    @jakarta.annotation.Nullable
    private String ep;

    public static final String SERIALIZED_NAME_BEP = "bep";

    @SerializedName(SERIALIZED_NAME_BEP)
    @jakarta.annotation.Nullable
    private String bep;

    public static final String SERIALIZED_NAME_CR = "cr";

    @SerializedName(SERIALIZED_NAME_CR)
    @jakarta.annotation.Nullable
    private String cr;

    public static final String SERIALIZED_NAME_UP = "up";

    @SerializedName(SERIALIZED_NAME_UP)
    @jakarta.annotation.Nullable
    private String up;

    public static final String SERIALIZED_NAME_MT = "mt";

    @SerializedName(SERIALIZED_NAME_MT)
    @jakarta.annotation.Nullable
    private String mt;

    public static final String SERIALIZED_NAME_IW = "iw";

    @SerializedName(SERIALIZED_NAME_IW)
    @jakarta.annotation.Nullable
    private String iw;

    public static final String SERIALIZED_NAME_PS = "ps";

    @SerializedName(SERIALIZED_NAME_PS)
    @jakarta.annotation.Nullable
    private String ps;

    public AccountUpdateAPInner() {}

    public AccountUpdateAPInner sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public AccountUpdateAPInner pa(@jakarta.annotation.Nullable String pa) {
        this.pa = pa;
        return this;
    }

    /**
     * Get pa
     *
     * @return pa
     */
    @jakarta.annotation.Nullable
    public String getPa() {
        return pa;
    }

    public void setPa(@jakarta.annotation.Nullable String pa) {
        this.pa = pa;
    }

    public AccountUpdateAPInner ep(@jakarta.annotation.Nullable String ep) {
        this.ep = ep;
        return this;
    }

    /**
     * Get ep
     *
     * @return ep
     */
    @jakarta.annotation.Nullable
    public String getEp() {
        return ep;
    }

    public void setEp(@jakarta.annotation.Nullable String ep) {
        this.ep = ep;
    }

    public AccountUpdateAPInner bep(@jakarta.annotation.Nullable String bep) {
        this.bep = bep;
        return this;
    }

    /**
     * Get bep
     *
     * @return bep
     */
    @jakarta.annotation.Nullable
    public String getBep() {
        return bep;
    }

    public void setBep(@jakarta.annotation.Nullable String bep) {
        this.bep = bep;
    }

    public AccountUpdateAPInner cr(@jakarta.annotation.Nullable String cr) {
        this.cr = cr;
        return this;
    }

    /**
     * Get cr
     *
     * @return cr
     */
    @jakarta.annotation.Nullable
    public String getCr() {
        return cr;
    }

    public void setCr(@jakarta.annotation.Nullable String cr) {
        this.cr = cr;
    }

    public AccountUpdateAPInner up(@jakarta.annotation.Nullable String up) {
        this.up = up;
        return this;
    }

    /**
     * Get up
     *
     * @return up
     */
    @jakarta.annotation.Nullable
    public String getUp() {
        return up;
    }

    public void setUp(@jakarta.annotation.Nullable String up) {
        this.up = up;
    }

    public AccountUpdateAPInner mt(@jakarta.annotation.Nullable String mt) {
        this.mt = mt;
        return this;
    }

    /**
     * Get mt
     *
     * @return mt
     */
    @jakarta.annotation.Nullable
    public String getMt() {
        return mt;
    }

    public void setMt(@jakarta.annotation.Nullable String mt) {
        this.mt = mt;
    }

    public AccountUpdateAPInner iw(@jakarta.annotation.Nullable String iw) {
        this.iw = iw;
        return this;
    }

    /**
     * Get iw
     *
     * @return iw
     */
    @jakarta.annotation.Nullable
    public String getIw() {
        return iw;
    }

    public void setIw(@jakarta.annotation.Nullable String iw) {
        this.iw = iw;
    }

    public AccountUpdateAPInner ps(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
        return this;
    }

    /**
     * Get ps
     *
     * @return ps
     */
    @jakarta.annotation.Nullable
    public String getPs() {
        return ps;
    }

    public void setPs(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountUpdateAPInner accountUpdateAPInner = (AccountUpdateAPInner) o;
        return Objects.equals(this.sLowerCase, accountUpdateAPInner.sLowerCase)
                && Objects.equals(this.pa, accountUpdateAPInner.pa)
                && Objects.equals(this.ep, accountUpdateAPInner.ep)
                && Objects.equals(this.bep, accountUpdateAPInner.bep)
                && Objects.equals(this.cr, accountUpdateAPInner.cr)
                && Objects.equals(this.up, accountUpdateAPInner.up)
                && Objects.equals(this.mt, accountUpdateAPInner.mt)
                && Objects.equals(this.iw, accountUpdateAPInner.iw)
                && Objects.equals(this.ps, accountUpdateAPInner.ps);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sLowerCase, pa, ep, bep, cr, up, mt, iw, ps);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountUpdateAPInner {\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		pa: ").append(toIndentedString(pa)).append("\n");
        sb.append("		ep: ").append(toIndentedString(ep)).append("\n");
        sb.append("		bep: ").append(toIndentedString(bep)).append("\n");
        sb.append("		cr: ").append(toIndentedString(cr)).append("\n");
        sb.append("		up: ").append(toIndentedString(up)).append("\n");
        sb.append("		mt: ").append(toIndentedString(mt)).append("\n");
        sb.append("		iw: ").append(toIndentedString(iw)).append("\n");
        sb.append("		ps: ").append(toIndentedString(ps)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String paValue = getPa();
        if (paValue != null) {
            String paValueAsString = paValue.toString();
            valMap.put("pa", paValueAsString);
        }
        String epValue = getEp();
        if (epValue != null) {
            String epValueAsString = epValue.toString();
            valMap.put("ep", epValueAsString);
        }
        String bepValue = getBep();
        if (bepValue != null) {
            String bepValueAsString = bepValue.toString();
            valMap.put("bep", bepValueAsString);
        }
        String crValue = getCr();
        if (crValue != null) {
            String crValueAsString = crValue.toString();
            valMap.put("cr", crValueAsString);
        }
        String upValue = getUp();
        if (upValue != null) {
            String upValueAsString = upValue.toString();
            valMap.put("up", upValueAsString);
        }
        String mtValue = getMt();
        if (mtValue != null) {
            String mtValueAsString = mtValue.toString();
            valMap.put("mt", mtValueAsString);
        }
        String iwValue = getIw();
        if (iwValue != null) {
            String iwValueAsString = iwValue.toString();
            valMap.put("iw", iwValueAsString);
        }
        String psValue = getPs();
        if (psValue != null) {
            String psValueAsString = psValue.toString();
            valMap.put("ps", psValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object paValue = getPa();
        if (paValue != null) {
            valMap.put("pa", paValue);
        }
        Object epValue = getEp();
        if (epValue != null) {
            valMap.put("ep", epValue);
        }
        Object bepValue = getBep();
        if (bepValue != null) {
            valMap.put("bep", bepValue);
        }
        Object crValue = getCr();
        if (crValue != null) {
            valMap.put("cr", crValue);
        }
        Object upValue = getUp();
        if (upValue != null) {
            valMap.put("up", upValue);
        }
        Object mtValue = getMt();
        if (mtValue != null) {
            valMap.put("mt", mtValue);
        }
        Object iwValue = getIw();
        if (iwValue != null) {
            valMap.put("iw", iwValue);
        }
        Object psValue = getPs();
        if (psValue != null) {
            valMap.put("ps", psValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("s");
        openapiFields.add("pa");
        openapiFields.add("ep");
        openapiFields.add("bep");
        openapiFields.add("cr");
        openapiFields.add("up");
        openapiFields.add("mt");
        openapiFields.add("iw");
        openapiFields.add("ps");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccountUpdateAPInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountUpdateAPInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountUpdateAPInner is not found in"
                                        + " the empty JSON string",
                                AccountUpdateAPInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountUpdateAPInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountUpdateAPInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("pa") != null && !jsonObj.get("pa").isJsonNull())
                && !jsonObj.get("pa").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pa` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("pa").toString()));
        }
        if ((jsonObj.get("ep") != null && !jsonObj.get("ep").isJsonNull())
                && !jsonObj.get("ep").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ep` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ep").toString()));
        }
        if ((jsonObj.get("bep") != null && !jsonObj.get("bep").isJsonNull())
                && !jsonObj.get("bep").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bep` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("bep").toString()));
        }
        if ((jsonObj.get("cr") != null && !jsonObj.get("cr").isJsonNull())
                && !jsonObj.get("cr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cr` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("cr").toString()));
        }
        if ((jsonObj.get("up") != null && !jsonObj.get("up").isJsonNull())
                && !jsonObj.get("up").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `up` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("up").toString()));
        }
        if ((jsonObj.get("mt") != null && !jsonObj.get("mt").isJsonNull())
                && !jsonObj.get("mt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `mt` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("mt").toString()));
        }
        if ((jsonObj.get("iw") != null && !jsonObj.get("iw").isJsonNull())
                && !jsonObj.get("iw").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `iw` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("iw").toString()));
        }
        if ((jsonObj.get("ps") != null && !jsonObj.get("ps").isJsonNull())
                && !jsonObj.get("ps").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ps` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ps").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountUpdateAPInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountUpdateAPInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountUpdateAPInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountUpdateAPInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountUpdateAPInner>() {
                        @Override
                        public void write(JsonWriter out, AccountUpdateAPInner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountUpdateAPInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountUpdateAPInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountUpdateAPInner
     * @throws IOException if the JSON string is invalid with respect to AccountUpdateAPInner
     */
    public static AccountUpdateAPInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountUpdateAPInner.class);
    }

    /**
     * Convert an instance of AccountUpdateAPInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

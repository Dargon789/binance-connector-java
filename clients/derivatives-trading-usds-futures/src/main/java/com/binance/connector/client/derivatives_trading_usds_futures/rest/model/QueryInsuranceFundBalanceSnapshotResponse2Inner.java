/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryInsuranceFundBalanceSnapshotResponse2Inner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryInsuranceFundBalanceSnapshotResponse2Inner {
    public static final String SERIALIZED_NAME_SYMBOLS = "symbols";

    @SerializedName(SERIALIZED_NAME_SYMBOLS)
    @jakarta.annotation.Nullable
    private List<String> symbols;

    public static final String SERIALIZED_NAME_ASSETS = "assets";

    @SerializedName(SERIALIZED_NAME_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid QueryInsuranceFundBalanceSnapshotResponse2InnerAssetsInner> assets;

    public QueryInsuranceFundBalanceSnapshotResponse2Inner() {}

    public QueryInsuranceFundBalanceSnapshotResponse2Inner symbols(
            @jakarta.annotation.Nullable List<String> symbols) {
        this.symbols = symbols;
        return this;
    }

    public QueryInsuranceFundBalanceSnapshotResponse2Inner addSymbolsItem(String symbolsItem) {
        if (this.symbols == null) {
            this.symbols = new ArrayList<>();
        }
        this.symbols.add(symbolsItem);
        return this;
    }

    /**
     * Get symbols
     *
     * @return symbols
     */
    @jakarta.annotation.Nullable
    public List<String> getSymbols() {
        return symbols;
    }

    public void setSymbols(@jakarta.annotation.Nullable List<String> symbols) {
        this.symbols = symbols;
    }

    public QueryInsuranceFundBalanceSnapshotResponse2Inner assets(
            @jakarta.annotation.Nullable
                    List<@Valid QueryInsuranceFundBalanceSnapshotResponse2InnerAssetsInner>
                            assets) {
        this.assets = assets;
        return this;
    }

    public QueryInsuranceFundBalanceSnapshotResponse2Inner addAssetsItem(
            QueryInsuranceFundBalanceSnapshotResponse2InnerAssetsInner assetsItem) {
        if (this.assets == null) {
            this.assets = new ArrayList<>();
        }
        this.assets.add(assetsItem);
        return this;
    }

    /**
     * Get assets
     *
     * @return assets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryInsuranceFundBalanceSnapshotResponse2InnerAssetsInner> getAssets() {
        return assets;
    }

    public void setAssets(
            @jakarta.annotation.Nullable
                    List<@Valid QueryInsuranceFundBalanceSnapshotResponse2InnerAssetsInner>
                            assets) {
        this.assets = assets;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryInsuranceFundBalanceSnapshotResponse2Inner
                queryInsuranceFundBalanceSnapshotResponse2Inner =
                        (QueryInsuranceFundBalanceSnapshotResponse2Inner) o;
        return Objects.equals(this.symbols, queryInsuranceFundBalanceSnapshotResponse2Inner.symbols)
                && Objects.equals(
                        this.assets, queryInsuranceFundBalanceSnapshotResponse2Inner.assets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbols, assets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryInsuranceFundBalanceSnapshotResponse2Inner {\n");
        sb.append("		symbols: ").append(toIndentedString(symbols)).append("\n");
        sb.append("		assets: ").append(toIndentedString(assets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolsValue = getSymbols();
        String symbolsValueAsString = "";
        symbolsValueAsString =
                (String)
                        ((Collection) symbolsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("symbols=").append(urlEncode(symbolsValueAsString)).append("");
        Object assetsValue = getAssets();
        String assetsValueAsString = "";
        assetsValueAsString =
                (String)
                        ((Collection) assetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assets=").append(urlEncode(assetsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbols");
        openapiFields.add("assets");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryInsuranceFundBalanceSnapshotResponse2Inner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryInsuranceFundBalanceSnapshotResponse2Inner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " QueryInsuranceFundBalanceSnapshotResponse2Inner is not"
                                        + " found in the empty JSON string",
                                QueryInsuranceFundBalanceSnapshotResponse2Inner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("symbols") != null
                && !jsonObj.get("symbols").isJsonNull()
                && !jsonObj.get("symbols").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbols` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("symbols").toString()));
        }
        if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
            JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
            if (jsonArrayassets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assets` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("assets").toString()));
                }

                // validate the optional field `assets` (array)
                for (int i = 0; i < jsonArrayassets.size(); i++) {
                    QueryInsuranceFundBalanceSnapshotResponse2InnerAssetsInner.validateJsonElement(
                            jsonArrayassets.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryInsuranceFundBalanceSnapshotResponse2Inner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryInsuranceFundBalanceSnapshotResponse2Inner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryInsuranceFundBalanceSnapshotResponse2Inner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QueryInsuranceFundBalanceSnapshotResponse2Inner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryInsuranceFundBalanceSnapshotResponse2Inner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryInsuranceFundBalanceSnapshotResponse2Inner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryInsuranceFundBalanceSnapshotResponse2Inner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryInsuranceFundBalanceSnapshotResponse2Inner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryInsuranceFundBalanceSnapshotResponse2Inner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryInsuranceFundBalanceSnapshotResponse2Inner
     */
    public static QueryInsuranceFundBalanceSnapshotResponse2Inner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryInsuranceFundBalanceSnapshotResponse2Inner.class);
    }

    /**
     * Convert an instance of QueryInsuranceFundBalanceSnapshotResponse2Inner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

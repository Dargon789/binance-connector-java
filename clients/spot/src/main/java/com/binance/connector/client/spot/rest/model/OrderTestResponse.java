/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** OrderTestResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderTestResponse {
    public static final String SERIALIZED_NAME_STANDARD_COMMISSION_FOR_ORDER =
            "standardCommissionForOrder";

    @SerializedName(SERIALIZED_NAME_STANDARD_COMMISSION_FOR_ORDER)
    @jakarta.annotation.Nullable
    private OrderTestResponseStandardCommissionForOrder standardCommissionForOrder;

    public static final String SERIALIZED_NAME_SPECIAL_COMMISSION_FOR_ORDER =
            "specialCommissionForOrder";

    @SerializedName(SERIALIZED_NAME_SPECIAL_COMMISSION_FOR_ORDER)
    @jakarta.annotation.Nullable
    private OrderTestResponseSpecialCommissionForOrder specialCommissionForOrder;

    public static final String SERIALIZED_NAME_TAX_COMMISSION_FOR_ORDER = "taxCommissionForOrder";

    @SerializedName(SERIALIZED_NAME_TAX_COMMISSION_FOR_ORDER)
    @jakarta.annotation.Nullable
    private OrderTestResponseStandardCommissionForOrder taxCommissionForOrder;

    public static final String SERIALIZED_NAME_DISCOUNT = "discount";

    @SerializedName(SERIALIZED_NAME_DISCOUNT)
    @jakarta.annotation.Nullable
    private OrderTestResponseDiscount discount;

    public OrderTestResponse() {}

    public OrderTestResponse standardCommissionForOrder(
            @jakarta.annotation.Nullable
                    OrderTestResponseStandardCommissionForOrder standardCommissionForOrder) {
        this.standardCommissionForOrder = standardCommissionForOrder;
        return this;
    }

    /**
     * Get standardCommissionForOrder
     *
     * @return standardCommissionForOrder
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderTestResponseStandardCommissionForOrder getStandardCommissionForOrder() {
        return standardCommissionForOrder;
    }

    public void setStandardCommissionForOrder(
            @jakarta.annotation.Nullable
                    OrderTestResponseStandardCommissionForOrder standardCommissionForOrder) {
        this.standardCommissionForOrder = standardCommissionForOrder;
    }

    public OrderTestResponse specialCommissionForOrder(
            @jakarta.annotation.Nullable
                    OrderTestResponseSpecialCommissionForOrder specialCommissionForOrder) {
        this.specialCommissionForOrder = specialCommissionForOrder;
        return this;
    }

    /**
     * Get specialCommissionForOrder
     *
     * @return specialCommissionForOrder
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderTestResponseSpecialCommissionForOrder getSpecialCommissionForOrder() {
        return specialCommissionForOrder;
    }

    public void setSpecialCommissionForOrder(
            @jakarta.annotation.Nullable
                    OrderTestResponseSpecialCommissionForOrder specialCommissionForOrder) {
        this.specialCommissionForOrder = specialCommissionForOrder;
    }

    public OrderTestResponse taxCommissionForOrder(
            @jakarta.annotation.Nullable
                    OrderTestResponseStandardCommissionForOrder taxCommissionForOrder) {
        this.taxCommissionForOrder = taxCommissionForOrder;
        return this;
    }

    /**
     * Get taxCommissionForOrder
     *
     * @return taxCommissionForOrder
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderTestResponseStandardCommissionForOrder getTaxCommissionForOrder() {
        return taxCommissionForOrder;
    }

    public void setTaxCommissionForOrder(
            @jakarta.annotation.Nullable
                    OrderTestResponseStandardCommissionForOrder taxCommissionForOrder) {
        this.taxCommissionForOrder = taxCommissionForOrder;
    }

    public OrderTestResponse discount(
            @jakarta.annotation.Nullable OrderTestResponseDiscount discount) {
        this.discount = discount;
        return this;
    }

    /**
     * Get discount
     *
     * @return discount
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderTestResponseDiscount getDiscount() {
        return discount;
    }

    public void setDiscount(@jakarta.annotation.Nullable OrderTestResponseDiscount discount) {
        this.discount = discount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderTestResponse orderTestResponse = (OrderTestResponse) o;
        return Objects.equals(
                        this.standardCommissionForOrder,
                        orderTestResponse.standardCommissionForOrder)
                && Objects.equals(
                        this.specialCommissionForOrder, orderTestResponse.specialCommissionForOrder)
                && Objects.equals(
                        this.taxCommissionForOrder, orderTestResponse.taxCommissionForOrder)
                && Objects.equals(this.discount, orderTestResponse.discount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                standardCommissionForOrder,
                specialCommissionForOrder,
                taxCommissionForOrder,
                discount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderTestResponse {\n");
        sb.append("		standardCommissionForOrder: ")
                .append(toIndentedString(standardCommissionForOrder))
                .append("\n");
        sb.append("		specialCommissionForOrder: ")
                .append(toIndentedString(specialCommissionForOrder))
                .append("\n");
        sb.append("		taxCommissionForOrder: ")
                .append(toIndentedString(taxCommissionForOrder))
                .append("\n");
        sb.append("		discount: ").append(toIndentedString(discount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object standardCommissionForOrderValue = getStandardCommissionForOrder();
        String standardCommissionForOrderValueAsString = "";
        standardCommissionForOrderValueAsString = standardCommissionForOrderValue.toString();
        sb.append("standardCommissionForOrder=")
                .append(urlEncode(standardCommissionForOrderValueAsString))
                .append("");
        Object specialCommissionForOrderValue = getSpecialCommissionForOrder();
        String specialCommissionForOrderValueAsString = "";
        specialCommissionForOrderValueAsString = specialCommissionForOrderValue.toString();
        sb.append("specialCommissionForOrder=")
                .append(urlEncode(specialCommissionForOrderValueAsString))
                .append("");
        Object taxCommissionForOrderValue = getTaxCommissionForOrder();
        String taxCommissionForOrderValueAsString = "";
        taxCommissionForOrderValueAsString = taxCommissionForOrderValue.toString();
        sb.append("taxCommissionForOrder=")
                .append(urlEncode(taxCommissionForOrderValueAsString))
                .append("");
        Object discountValue = getDiscount();
        String discountValueAsString = "";
        discountValueAsString = discountValue.toString();
        sb.append("discount=").append(urlEncode(discountValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("standardCommissionForOrder");
        openapiFields.add("specialCommissionForOrder");
        openapiFields.add("taxCommissionForOrder");
        openapiFields.add("discount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderTestResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderTestResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderTestResponse is not found in the"
                                        + " empty JSON string",
                                OrderTestResponse.openapiRequiredFields.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `standardCommissionForOrder`
        if (jsonObj.get("standardCommissionForOrder") != null
                && !jsonObj.get("standardCommissionForOrder").isJsonNull()) {
            OrderTestResponseStandardCommissionForOrder.validateJsonElement(
                    jsonObj.get("standardCommissionForOrder"));
        }
        // validate the optional field `specialCommissionForOrder`
        if (jsonObj.get("specialCommissionForOrder") != null
                && !jsonObj.get("specialCommissionForOrder").isJsonNull()) {
            OrderTestResponseSpecialCommissionForOrder.validateJsonElement(
                    jsonObj.get("specialCommissionForOrder"));
        }
        // validate the optional field `taxCommissionForOrder`
        if (jsonObj.get("taxCommissionForOrder") != null
                && !jsonObj.get("taxCommissionForOrder").isJsonNull()) {
            OrderTestResponseStandardCommissionForOrder.validateJsonElement(
                    jsonObj.get("taxCommissionForOrder"));
        }
        // validate the optional field `discount`
        if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
            OrderTestResponseDiscount.validateJsonElement(jsonObj.get("discount"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderTestResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderTestResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderTestResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderTestResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderTestResponse>() {
                        @Override
                        public void write(JsonWriter out, OrderTestResponse value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderTestResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderTestResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderTestResponse
     * @throws IOException if the JSON string is invalid with respect to OrderTestResponse
     */
    public static OrderTestResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderTestResponse.class);
    }

    /**
     * Convert an instance of OrderTestResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

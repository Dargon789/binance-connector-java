/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OutboundAccountPosition */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OutboundAccountPosition extends BaseDTO {
    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long uLowerCase;

    public static final String SERIALIZED_NAME_B = "B";

    @SerializedName(SERIALIZED_NAME_B)
    @jakarta.annotation.Nullable
    private List<@Valid OutboundAccountPositionBInner> B;

    public OutboundAccountPosition() {}

    public OutboundAccountPosition E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public OutboundAccountPosition uLowerCase(@jakarta.annotation.Nullable Long uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable Long uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public OutboundAccountPosition B(
            @jakarta.annotation.Nullable List<@Valid OutboundAccountPositionBInner> B) {
        this.B = B;
        return this;
    }

    public OutboundAccountPosition addBItem(OutboundAccountPositionBInner BItem) {
        if (this.B == null) {
            this.B = new ArrayList<>();
        }
        this.B.add(BItem);
        return this;
    }

    /**
     * Get B
     *
     * @return B
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid OutboundAccountPositionBInner> getB() {
        return B;
    }

    public void setB(@jakarta.annotation.Nullable List<@Valid OutboundAccountPositionBInner> B) {
        this.B = B;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OutboundAccountPosition outboundAccountPosition = (OutboundAccountPosition) o;
        return Objects.equals(this.E, outboundAccountPosition.E)
                && Objects.equals(this.uLowerCase, outboundAccountPosition.uLowerCase)
                && Objects.equals(this.B, outboundAccountPosition.B);
    }

    @Override
    public int hashCode() {
        return Objects.hash(E, uLowerCase, B);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OutboundAccountPosition {\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		B: ").append(toIndentedString(B)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        Long uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            String uLowerCaseValueAsString = uLowerCaseValue.toString();
            valMap.put("uLowerCase", uLowerCaseValueAsString);
        }
        List<@Valid OutboundAccountPositionBInner> BValue = getB();
        if (BValue != null) {
            String BValueAsString = JSON.getGson().toJson(BValue);
            valMap.put("B", BValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            valMap.put("uLowerCase", uLowerCaseValue);
        }
        Object BValue = getB();
        if (BValue != null) {
            valMap.put("B", BValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("E");
        openapiFields.add("u");
        openapiFields.add("B");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OutboundAccountPosition
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OutboundAccountPosition.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OutboundAccountPosition is not found"
                                        + " in the empty JSON string",
                                OutboundAccountPosition.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OutboundAccountPosition.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OutboundAccountPosition` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull()) {
            JsonArray jsonArrayB = jsonObj.getAsJsonArray("B");
            if (jsonArrayB != null) {
                // ensure the json data is an array
                if (!jsonObj.get("B").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `B` to be an array in the JSON string but"
                                            + " got `%s`",
                                    jsonObj.get("B").toString()));
                }

                // validate the optional field `B` (array)
                for (int i = 0; i < jsonArrayB.size(); i++) {
                    OutboundAccountPositionBInner.validateJsonElement(jsonArrayB.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OutboundAccountPosition.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OutboundAccountPosition' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OutboundAccountPosition> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OutboundAccountPosition.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OutboundAccountPosition>() {
                        @Override
                        public void write(JsonWriter out, OutboundAccountPosition value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OutboundAccountPosition read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OutboundAccountPosition given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OutboundAccountPosition
     * @throws IOException if the JSON string is invalid with respect to OutboundAccountPosition
     */
    public static OutboundAccountPosition fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OutboundAccountPosition.class);
    }

    /**
     * Convert an instance of OutboundAccountPosition to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

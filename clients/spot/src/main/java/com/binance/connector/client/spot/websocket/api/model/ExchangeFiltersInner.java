/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ExchangeFiltersInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeFiltersInner extends BaseDTO {
    public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";

    @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
    @jakarta.annotation.Nullable
    private String filterType;

    public static final String SERIALIZED_NAME_MIN_PRICE = "minPrice";

    @SerializedName(SERIALIZED_NAME_MIN_PRICE)
    @jakarta.annotation.Nullable
    private String minPrice;

    public static final String SERIALIZED_NAME_MAX_PRICE = "maxPrice";

    @SerializedName(SERIALIZED_NAME_MAX_PRICE)
    @jakarta.annotation.Nullable
    private String maxPrice;

    public static final String SERIALIZED_NAME_TICK_SIZE = "tickSize";

    @SerializedName(SERIALIZED_NAME_TICK_SIZE)
    @jakarta.annotation.Nullable
    private String tickSize;

    public static final String SERIALIZED_NAME_MULTIPLIER_UP = "multiplierUp";

    @SerializedName(SERIALIZED_NAME_MULTIPLIER_UP)
    @jakarta.annotation.Nullable
    private String multiplierUp;

    public static final String SERIALIZED_NAME_MULTIPLIER_DOWN = "multiplierDown";

    @SerializedName(SERIALIZED_NAME_MULTIPLIER_DOWN)
    @jakarta.annotation.Nullable
    private String multiplierDown;

    public static final String SERIALIZED_NAME_AVG_PRICE_MINS = "avgPriceMins";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE_MINS)
    @jakarta.annotation.Nullable
    private Long avgPriceMins;

    public static final String SERIALIZED_NAME_BID_MULTIPLIER_UP = "bidMultiplierUp";

    @SerializedName(SERIALIZED_NAME_BID_MULTIPLIER_UP)
    @jakarta.annotation.Nullable
    private String bidMultiplierUp;

    public static final String SERIALIZED_NAME_BID_MULTIPLIER_DOWN = "bidMultiplierDown";

    @SerializedName(SERIALIZED_NAME_BID_MULTIPLIER_DOWN)
    @jakarta.annotation.Nullable
    private String bidMultiplierDown;

    public static final String SERIALIZED_NAME_ASK_MULTIPLIER_UP = "askMultiplierUp";

    @SerializedName(SERIALIZED_NAME_ASK_MULTIPLIER_UP)
    @jakarta.annotation.Nullable
    private String askMultiplierUp;

    public static final String SERIALIZED_NAME_ASK_MULTIPLIER_DOWN = "askMultiplierDown";

    @SerializedName(SERIALIZED_NAME_ASK_MULTIPLIER_DOWN)
    @jakarta.annotation.Nullable
    private String askMultiplierDown;

    public static final String SERIALIZED_NAME_MIN_QTY = "minQty";

    @SerializedName(SERIALIZED_NAME_MIN_QTY)
    @jakarta.annotation.Nullable
    private String minQty;

    public static final String SERIALIZED_NAME_MAX_QTY = "maxQty";

    @SerializedName(SERIALIZED_NAME_MAX_QTY)
    @jakarta.annotation.Nullable
    private String maxQty;

    public static final String SERIALIZED_NAME_STEP_SIZE = "stepSize";

    @SerializedName(SERIALIZED_NAME_STEP_SIZE)
    @jakarta.annotation.Nullable
    private String stepSize;

    public static final String SERIALIZED_NAME_MIN_NOTIONAL = "minNotional";

    @SerializedName(SERIALIZED_NAME_MIN_NOTIONAL)
    @jakarta.annotation.Nullable
    private String minNotional;

    public static final String SERIALIZED_NAME_APPLY_TO_MARKET = "applyToMarket";

    @SerializedName(SERIALIZED_NAME_APPLY_TO_MARKET)
    @jakarta.annotation.Nullable
    private Boolean applyToMarket;

    public static final String SERIALIZED_NAME_APPLY_MIN_TO_MARKET = "applyMinToMarket";

    @SerializedName(SERIALIZED_NAME_APPLY_MIN_TO_MARKET)
    @jakarta.annotation.Nullable
    private Boolean applyMinToMarket;

    public static final String SERIALIZED_NAME_MAX_NOTIONAL = "maxNotional";

    @SerializedName(SERIALIZED_NAME_MAX_NOTIONAL)
    @jakarta.annotation.Nullable
    private String maxNotional;

    public static final String SERIALIZED_NAME_APPLY_MAX_TO_MARKET = "applyMaxToMarket";

    @SerializedName(SERIALIZED_NAME_APPLY_MAX_TO_MARKET)
    @jakarta.annotation.Nullable
    private Boolean applyMaxToMarket;

    public static final String SERIALIZED_NAME_LIMIT = "limit";

    @SerializedName(SERIALIZED_NAME_LIMIT)
    @jakarta.annotation.Nullable
    private Long limit;

    public static final String SERIALIZED_NAME_MAX_NUM_ORDERS = "maxNumOrders";

    @SerializedName(SERIALIZED_NAME_MAX_NUM_ORDERS)
    @jakarta.annotation.Nullable
    private Long maxNumOrders;

    public static final String SERIALIZED_NAME_MAX_NUM_ALGO_ORDERS = "maxNumAlgoOrders";

    @SerializedName(SERIALIZED_NAME_MAX_NUM_ALGO_ORDERS)
    @jakarta.annotation.Nullable
    private Long maxNumAlgoOrders;

    public static final String SERIALIZED_NAME_MAX_NUM_ICEBERG_ORDERS = "maxNumIcebergOrders";

    @SerializedName(SERIALIZED_NAME_MAX_NUM_ICEBERG_ORDERS)
    @jakarta.annotation.Nullable
    private Long maxNumIcebergOrders;

    public static final String SERIALIZED_NAME_MAX_POSITION = "maxPosition";

    @SerializedName(SERIALIZED_NAME_MAX_POSITION)
    @jakarta.annotation.Nullable
    private String maxPosition;

    public static final String SERIALIZED_NAME_MIN_TRAILING_ABOVE_DELTA = "minTrailingAboveDelta";

    @SerializedName(SERIALIZED_NAME_MIN_TRAILING_ABOVE_DELTA)
    @jakarta.annotation.Nullable
    private Long minTrailingAboveDelta;

    public static final String SERIALIZED_NAME_MAX_TRAILING_ABOVE_DELTA = "maxTrailingAboveDelta";

    @SerializedName(SERIALIZED_NAME_MAX_TRAILING_ABOVE_DELTA)
    @jakarta.annotation.Nullable
    private Long maxTrailingAboveDelta;

    public static final String SERIALIZED_NAME_MIN_TRAILING_BELOW_DELTA = "minTrailingBelowDelta";

    @SerializedName(SERIALIZED_NAME_MIN_TRAILING_BELOW_DELTA)
    @jakarta.annotation.Nullable
    private Long minTrailingBelowDelta;

    public static final String SERIALIZED_NAME_MAX_TRAILING_BELOW_DELTA = "maxTrailingBelowDelta";

    @SerializedName(SERIALIZED_NAME_MAX_TRAILING_BELOW_DELTA)
    @jakarta.annotation.Nullable
    private Long maxTrailingBelowDelta;

    public static final String SERIALIZED_NAME_MAX_NUM_ORDER_AMENDS = "maxNumOrderAmends";

    @SerializedName(SERIALIZED_NAME_MAX_NUM_ORDER_AMENDS)
    @jakarta.annotation.Nullable
    private Long maxNumOrderAmends;

    public static final String SERIALIZED_NAME_MAX_NUM_ORDER_LISTS = "maxNumOrderLists";

    @SerializedName(SERIALIZED_NAME_MAX_NUM_ORDER_LISTS)
    @jakarta.annotation.Nullable
    private Long maxNumOrderLists;

    public ExchangeFiltersInner() {}

    public ExchangeFiltersInner filterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Get filterType
     *
     * @return filterType
     */
    @jakarta.annotation.Nullable
    public String getFilterType() {
        return filterType;
    }

    public void setFilterType(@jakarta.annotation.Nullable String filterType) {
        this.filterType = filterType;
    }

    public ExchangeFiltersInner minPrice(@jakarta.annotation.Nullable String minPrice) {
        this.minPrice = minPrice;
        return this;
    }

    /**
     * Get minPrice
     *
     * @return minPrice
     */
    @jakarta.annotation.Nullable
    public String getMinPrice() {
        return minPrice;
    }

    public void setMinPrice(@jakarta.annotation.Nullable String minPrice) {
        this.minPrice = minPrice;
    }

    public ExchangeFiltersInner maxPrice(@jakarta.annotation.Nullable String maxPrice) {
        this.maxPrice = maxPrice;
        return this;
    }

    /**
     * Get maxPrice
     *
     * @return maxPrice
     */
    @jakarta.annotation.Nullable
    public String getMaxPrice() {
        return maxPrice;
    }

    public void setMaxPrice(@jakarta.annotation.Nullable String maxPrice) {
        this.maxPrice = maxPrice;
    }

    public ExchangeFiltersInner tickSize(@jakarta.annotation.Nullable String tickSize) {
        this.tickSize = tickSize;
        return this;
    }

    /**
     * Get tickSize
     *
     * @return tickSize
     */
    @jakarta.annotation.Nullable
    public String getTickSize() {
        return tickSize;
    }

    public void setTickSize(@jakarta.annotation.Nullable String tickSize) {
        this.tickSize = tickSize;
    }

    public ExchangeFiltersInner multiplierUp(@jakarta.annotation.Nullable String multiplierUp) {
        this.multiplierUp = multiplierUp;
        return this;
    }

    /**
     * Get multiplierUp
     *
     * @return multiplierUp
     */
    @jakarta.annotation.Nullable
    public String getMultiplierUp() {
        return multiplierUp;
    }

    public void setMultiplierUp(@jakarta.annotation.Nullable String multiplierUp) {
        this.multiplierUp = multiplierUp;
    }

    public ExchangeFiltersInner multiplierDown(@jakarta.annotation.Nullable String multiplierDown) {
        this.multiplierDown = multiplierDown;
        return this;
    }

    /**
     * Get multiplierDown
     *
     * @return multiplierDown
     */
    @jakarta.annotation.Nullable
    public String getMultiplierDown() {
        return multiplierDown;
    }

    public void setMultiplierDown(@jakarta.annotation.Nullable String multiplierDown) {
        this.multiplierDown = multiplierDown;
    }

    public ExchangeFiltersInner avgPriceMins(@jakarta.annotation.Nullable Long avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
        return this;
    }

    /**
     * Get avgPriceMins
     *
     * @return avgPriceMins
     */
    @jakarta.annotation.Nullable
    public Long getAvgPriceMins() {
        return avgPriceMins;
    }

    public void setAvgPriceMins(@jakarta.annotation.Nullable Long avgPriceMins) {
        this.avgPriceMins = avgPriceMins;
    }

    public ExchangeFiltersInner bidMultiplierUp(
            @jakarta.annotation.Nullable String bidMultiplierUp) {
        this.bidMultiplierUp = bidMultiplierUp;
        return this;
    }

    /**
     * Get bidMultiplierUp
     *
     * @return bidMultiplierUp
     */
    @jakarta.annotation.Nullable
    public String getBidMultiplierUp() {
        return bidMultiplierUp;
    }

    public void setBidMultiplierUp(@jakarta.annotation.Nullable String bidMultiplierUp) {
        this.bidMultiplierUp = bidMultiplierUp;
    }

    public ExchangeFiltersInner bidMultiplierDown(
            @jakarta.annotation.Nullable String bidMultiplierDown) {
        this.bidMultiplierDown = bidMultiplierDown;
        return this;
    }

    /**
     * Get bidMultiplierDown
     *
     * @return bidMultiplierDown
     */
    @jakarta.annotation.Nullable
    public String getBidMultiplierDown() {
        return bidMultiplierDown;
    }

    public void setBidMultiplierDown(@jakarta.annotation.Nullable String bidMultiplierDown) {
        this.bidMultiplierDown = bidMultiplierDown;
    }

    public ExchangeFiltersInner askMultiplierUp(
            @jakarta.annotation.Nullable String askMultiplierUp) {
        this.askMultiplierUp = askMultiplierUp;
        return this;
    }

    /**
     * Get askMultiplierUp
     *
     * @return askMultiplierUp
     */
    @jakarta.annotation.Nullable
    public String getAskMultiplierUp() {
        return askMultiplierUp;
    }

    public void setAskMultiplierUp(@jakarta.annotation.Nullable String askMultiplierUp) {
        this.askMultiplierUp = askMultiplierUp;
    }

    public ExchangeFiltersInner askMultiplierDown(
            @jakarta.annotation.Nullable String askMultiplierDown) {
        this.askMultiplierDown = askMultiplierDown;
        return this;
    }

    /**
     * Get askMultiplierDown
     *
     * @return askMultiplierDown
     */
    @jakarta.annotation.Nullable
    public String getAskMultiplierDown() {
        return askMultiplierDown;
    }

    public void setAskMultiplierDown(@jakarta.annotation.Nullable String askMultiplierDown) {
        this.askMultiplierDown = askMultiplierDown;
    }

    public ExchangeFiltersInner minQty(@jakarta.annotation.Nullable String minQty) {
        this.minQty = minQty;
        return this;
    }

    /**
     * Get minQty
     *
     * @return minQty
     */
    @jakarta.annotation.Nullable
    public String getMinQty() {
        return minQty;
    }

    public void setMinQty(@jakarta.annotation.Nullable String minQty) {
        this.minQty = minQty;
    }

    public ExchangeFiltersInner maxQty(@jakarta.annotation.Nullable String maxQty) {
        this.maxQty = maxQty;
        return this;
    }

    /**
     * Get maxQty
     *
     * @return maxQty
     */
    @jakarta.annotation.Nullable
    public String getMaxQty() {
        return maxQty;
    }

    public void setMaxQty(@jakarta.annotation.Nullable String maxQty) {
        this.maxQty = maxQty;
    }

    public ExchangeFiltersInner stepSize(@jakarta.annotation.Nullable String stepSize) {
        this.stepSize = stepSize;
        return this;
    }

    /**
     * Get stepSize
     *
     * @return stepSize
     */
    @jakarta.annotation.Nullable
    public String getStepSize() {
        return stepSize;
    }

    public void setStepSize(@jakarta.annotation.Nullable String stepSize) {
        this.stepSize = stepSize;
    }

    public ExchangeFiltersInner minNotional(@jakarta.annotation.Nullable String minNotional) {
        this.minNotional = minNotional;
        return this;
    }

    /**
     * Get minNotional
     *
     * @return minNotional
     */
    @jakarta.annotation.Nullable
    public String getMinNotional() {
        return minNotional;
    }

    public void setMinNotional(@jakarta.annotation.Nullable String minNotional) {
        this.minNotional = minNotional;
    }

    public ExchangeFiltersInner applyToMarket(@jakarta.annotation.Nullable Boolean applyToMarket) {
        this.applyToMarket = applyToMarket;
        return this;
    }

    /**
     * Get applyToMarket
     *
     * @return applyToMarket
     */
    @jakarta.annotation.Nullable
    public Boolean getApplyToMarket() {
        return applyToMarket;
    }

    public void setApplyToMarket(@jakarta.annotation.Nullable Boolean applyToMarket) {
        this.applyToMarket = applyToMarket;
    }

    public ExchangeFiltersInner applyMinToMarket(
            @jakarta.annotation.Nullable Boolean applyMinToMarket) {
        this.applyMinToMarket = applyMinToMarket;
        return this;
    }

    /**
     * Get applyMinToMarket
     *
     * @return applyMinToMarket
     */
    @jakarta.annotation.Nullable
    public Boolean getApplyMinToMarket() {
        return applyMinToMarket;
    }

    public void setApplyMinToMarket(@jakarta.annotation.Nullable Boolean applyMinToMarket) {
        this.applyMinToMarket = applyMinToMarket;
    }

    public ExchangeFiltersInner maxNotional(@jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
        return this;
    }

    /**
     * Get maxNotional
     *
     * @return maxNotional
     */
    @jakarta.annotation.Nullable
    public String getMaxNotional() {
        return maxNotional;
    }

    public void setMaxNotional(@jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
    }

    public ExchangeFiltersInner applyMaxToMarket(
            @jakarta.annotation.Nullable Boolean applyMaxToMarket) {
        this.applyMaxToMarket = applyMaxToMarket;
        return this;
    }

    /**
     * Get applyMaxToMarket
     *
     * @return applyMaxToMarket
     */
    @jakarta.annotation.Nullable
    public Boolean getApplyMaxToMarket() {
        return applyMaxToMarket;
    }

    public void setApplyMaxToMarket(@jakarta.annotation.Nullable Boolean applyMaxToMarket) {
        this.applyMaxToMarket = applyMaxToMarket;
    }

    public ExchangeFiltersInner limit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @jakarta.annotation.Nullable
    public Long getLimit() {
        return limit;
    }

    public void setLimit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
    }

    public ExchangeFiltersInner maxNumOrders(@jakarta.annotation.Nullable Long maxNumOrders) {
        this.maxNumOrders = maxNumOrders;
        return this;
    }

    /**
     * Get maxNumOrders
     *
     * @return maxNumOrders
     */
    @jakarta.annotation.Nullable
    public Long getMaxNumOrders() {
        return maxNumOrders;
    }

    public void setMaxNumOrders(@jakarta.annotation.Nullable Long maxNumOrders) {
        this.maxNumOrders = maxNumOrders;
    }

    public ExchangeFiltersInner maxNumAlgoOrders(
            @jakarta.annotation.Nullable Long maxNumAlgoOrders) {
        this.maxNumAlgoOrders = maxNumAlgoOrders;
        return this;
    }

    /**
     * Get maxNumAlgoOrders
     *
     * @return maxNumAlgoOrders
     */
    @jakarta.annotation.Nullable
    public Long getMaxNumAlgoOrders() {
        return maxNumAlgoOrders;
    }

    public void setMaxNumAlgoOrders(@jakarta.annotation.Nullable Long maxNumAlgoOrders) {
        this.maxNumAlgoOrders = maxNumAlgoOrders;
    }

    public ExchangeFiltersInner maxNumIcebergOrders(
            @jakarta.annotation.Nullable Long maxNumIcebergOrders) {
        this.maxNumIcebergOrders = maxNumIcebergOrders;
        return this;
    }

    /**
     * Get maxNumIcebergOrders
     *
     * @return maxNumIcebergOrders
     */
    @jakarta.annotation.Nullable
    public Long getMaxNumIcebergOrders() {
        return maxNumIcebergOrders;
    }

    public void setMaxNumIcebergOrders(@jakarta.annotation.Nullable Long maxNumIcebergOrders) {
        this.maxNumIcebergOrders = maxNumIcebergOrders;
    }

    public ExchangeFiltersInner maxPosition(@jakarta.annotation.Nullable String maxPosition) {
        this.maxPosition = maxPosition;
        return this;
    }

    /**
     * Get maxPosition
     *
     * @return maxPosition
     */
    @jakarta.annotation.Nullable
    public String getMaxPosition() {
        return maxPosition;
    }

    public void setMaxPosition(@jakarta.annotation.Nullable String maxPosition) {
        this.maxPosition = maxPosition;
    }

    public ExchangeFiltersInner minTrailingAboveDelta(
            @jakarta.annotation.Nullable Long minTrailingAboveDelta) {
        this.minTrailingAboveDelta = minTrailingAboveDelta;
        return this;
    }

    /**
     * Get minTrailingAboveDelta
     *
     * @return minTrailingAboveDelta
     */
    @jakarta.annotation.Nullable
    public Long getMinTrailingAboveDelta() {
        return minTrailingAboveDelta;
    }

    public void setMinTrailingAboveDelta(@jakarta.annotation.Nullable Long minTrailingAboveDelta) {
        this.minTrailingAboveDelta = minTrailingAboveDelta;
    }

    public ExchangeFiltersInner maxTrailingAboveDelta(
            @jakarta.annotation.Nullable Long maxTrailingAboveDelta) {
        this.maxTrailingAboveDelta = maxTrailingAboveDelta;
        return this;
    }

    /**
     * Get maxTrailingAboveDelta
     *
     * @return maxTrailingAboveDelta
     */
    @jakarta.annotation.Nullable
    public Long getMaxTrailingAboveDelta() {
        return maxTrailingAboveDelta;
    }

    public void setMaxTrailingAboveDelta(@jakarta.annotation.Nullable Long maxTrailingAboveDelta) {
        this.maxTrailingAboveDelta = maxTrailingAboveDelta;
    }

    public ExchangeFiltersInner minTrailingBelowDelta(
            @jakarta.annotation.Nullable Long minTrailingBelowDelta) {
        this.minTrailingBelowDelta = minTrailingBelowDelta;
        return this;
    }

    /**
     * Get minTrailingBelowDelta
     *
     * @return minTrailingBelowDelta
     */
    @jakarta.annotation.Nullable
    public Long getMinTrailingBelowDelta() {
        return minTrailingBelowDelta;
    }

    public void setMinTrailingBelowDelta(@jakarta.annotation.Nullable Long minTrailingBelowDelta) {
        this.minTrailingBelowDelta = minTrailingBelowDelta;
    }

    public ExchangeFiltersInner maxTrailingBelowDelta(
            @jakarta.annotation.Nullable Long maxTrailingBelowDelta) {
        this.maxTrailingBelowDelta = maxTrailingBelowDelta;
        return this;
    }

    /**
     * Get maxTrailingBelowDelta
     *
     * @return maxTrailingBelowDelta
     */
    @jakarta.annotation.Nullable
    public Long getMaxTrailingBelowDelta() {
        return maxTrailingBelowDelta;
    }

    public void setMaxTrailingBelowDelta(@jakarta.annotation.Nullable Long maxTrailingBelowDelta) {
        this.maxTrailingBelowDelta = maxTrailingBelowDelta;
    }

    public ExchangeFiltersInner maxNumOrderAmends(
            @jakarta.annotation.Nullable Long maxNumOrderAmends) {
        this.maxNumOrderAmends = maxNumOrderAmends;
        return this;
    }

    /**
     * Get maxNumOrderAmends
     *
     * @return maxNumOrderAmends
     */
    @jakarta.annotation.Nullable
    public Long getMaxNumOrderAmends() {
        return maxNumOrderAmends;
    }

    public void setMaxNumOrderAmends(@jakarta.annotation.Nullable Long maxNumOrderAmends) {
        this.maxNumOrderAmends = maxNumOrderAmends;
    }

    public ExchangeFiltersInner maxNumOrderLists(
            @jakarta.annotation.Nullable Long maxNumOrderLists) {
        this.maxNumOrderLists = maxNumOrderLists;
        return this;
    }

    /**
     * Get maxNumOrderLists
     *
     * @return maxNumOrderLists
     */
    @jakarta.annotation.Nullable
    public Long getMaxNumOrderLists() {
        return maxNumOrderLists;
    }

    public void setMaxNumOrderLists(@jakarta.annotation.Nullable Long maxNumOrderLists) {
        this.maxNumOrderLists = maxNumOrderLists;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeFiltersInner exchangeFiltersInner = (ExchangeFiltersInner) o;
        return Objects.equals(this.filterType, exchangeFiltersInner.filterType)
                && Objects.equals(this.minPrice, exchangeFiltersInner.minPrice)
                && Objects.equals(this.maxPrice, exchangeFiltersInner.maxPrice)
                && Objects.equals(this.tickSize, exchangeFiltersInner.tickSize)
                && Objects.equals(this.multiplierUp, exchangeFiltersInner.multiplierUp)
                && Objects.equals(this.multiplierDown, exchangeFiltersInner.multiplierDown)
                && Objects.equals(this.avgPriceMins, exchangeFiltersInner.avgPriceMins)
                && Objects.equals(this.bidMultiplierUp, exchangeFiltersInner.bidMultiplierUp)
                && Objects.equals(this.bidMultiplierDown, exchangeFiltersInner.bidMultiplierDown)
                && Objects.equals(this.askMultiplierUp, exchangeFiltersInner.askMultiplierUp)
                && Objects.equals(this.askMultiplierDown, exchangeFiltersInner.askMultiplierDown)
                && Objects.equals(this.minQty, exchangeFiltersInner.minQty)
                && Objects.equals(this.maxQty, exchangeFiltersInner.maxQty)
                && Objects.equals(this.stepSize, exchangeFiltersInner.stepSize)
                && Objects.equals(this.minNotional, exchangeFiltersInner.minNotional)
                && Objects.equals(this.applyToMarket, exchangeFiltersInner.applyToMarket)
                && Objects.equals(this.applyMinToMarket, exchangeFiltersInner.applyMinToMarket)
                && Objects.equals(this.maxNotional, exchangeFiltersInner.maxNotional)
                && Objects.equals(this.applyMaxToMarket, exchangeFiltersInner.applyMaxToMarket)
                && Objects.equals(this.limit, exchangeFiltersInner.limit)
                && Objects.equals(this.maxNumOrders, exchangeFiltersInner.maxNumOrders)
                && Objects.equals(this.maxNumAlgoOrders, exchangeFiltersInner.maxNumAlgoOrders)
                && Objects.equals(
                        this.maxNumIcebergOrders, exchangeFiltersInner.maxNumIcebergOrders)
                && Objects.equals(this.maxPosition, exchangeFiltersInner.maxPosition)
                && Objects.equals(
                        this.minTrailingAboveDelta, exchangeFiltersInner.minTrailingAboveDelta)
                && Objects.equals(
                        this.maxTrailingAboveDelta, exchangeFiltersInner.maxTrailingAboveDelta)
                && Objects.equals(
                        this.minTrailingBelowDelta, exchangeFiltersInner.minTrailingBelowDelta)
                && Objects.equals(
                        this.maxTrailingBelowDelta, exchangeFiltersInner.maxTrailingBelowDelta)
                && Objects.equals(this.maxNumOrderAmends, exchangeFiltersInner.maxNumOrderAmends)
                && Objects.equals(this.maxNumOrderLists, exchangeFiltersInner.maxNumOrderLists);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                filterType,
                minPrice,
                maxPrice,
                tickSize,
                multiplierUp,
                multiplierDown,
                avgPriceMins,
                bidMultiplierUp,
                bidMultiplierDown,
                askMultiplierUp,
                askMultiplierDown,
                minQty,
                maxQty,
                stepSize,
                minNotional,
                applyToMarket,
                applyMinToMarket,
                maxNotional,
                applyMaxToMarket,
                limit,
                maxNumOrders,
                maxNumAlgoOrders,
                maxNumIcebergOrders,
                maxPosition,
                minTrailingAboveDelta,
                maxTrailingAboveDelta,
                minTrailingBelowDelta,
                maxTrailingBelowDelta,
                maxNumOrderAmends,
                maxNumOrderLists);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeFiltersInner {\n");
        sb.append("		filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("		minPrice: ").append(toIndentedString(minPrice)).append("\n");
        sb.append("		maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
        sb.append("		tickSize: ").append(toIndentedString(tickSize)).append("\n");
        sb.append("		multiplierUp: ").append(toIndentedString(multiplierUp)).append("\n");
        sb.append("		multiplierDown: ").append(toIndentedString(multiplierDown)).append("\n");
        sb.append("		avgPriceMins: ").append(toIndentedString(avgPriceMins)).append("\n");
        sb.append("		bidMultiplierUp: ").append(toIndentedString(bidMultiplierUp)).append("\n");
        sb.append("		bidMultiplierDown: ").append(toIndentedString(bidMultiplierDown)).append("\n");
        sb.append("		askMultiplierUp: ").append(toIndentedString(askMultiplierUp)).append("\n");
        sb.append("		askMultiplierDown: ").append(toIndentedString(askMultiplierDown)).append("\n");
        sb.append("		minQty: ").append(toIndentedString(minQty)).append("\n");
        sb.append("		maxQty: ").append(toIndentedString(maxQty)).append("\n");
        sb.append("		stepSize: ").append(toIndentedString(stepSize)).append("\n");
        sb.append("		minNotional: ").append(toIndentedString(minNotional)).append("\n");
        sb.append("		applyToMarket: ").append(toIndentedString(applyToMarket)).append("\n");
        sb.append("		applyMinToMarket: ").append(toIndentedString(applyMinToMarket)).append("\n");
        sb.append("		maxNotional: ").append(toIndentedString(maxNotional)).append("\n");
        sb.append("		applyMaxToMarket: ").append(toIndentedString(applyMaxToMarket)).append("\n");
        sb.append("		limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("		maxNumOrders: ").append(toIndentedString(maxNumOrders)).append("\n");
        sb.append("		maxNumAlgoOrders: ").append(toIndentedString(maxNumAlgoOrders)).append("\n");
        sb.append("		maxNumIcebergOrders: ")
                .append(toIndentedString(maxNumIcebergOrders))
                .append("\n");
        sb.append("		maxPosition: ").append(toIndentedString(maxPosition)).append("\n");
        sb.append("		minTrailingAboveDelta: ")
                .append(toIndentedString(minTrailingAboveDelta))
                .append("\n");
        sb.append("		maxTrailingAboveDelta: ")
                .append(toIndentedString(maxTrailingAboveDelta))
                .append("\n");
        sb.append("		minTrailingBelowDelta: ")
                .append(toIndentedString(minTrailingBelowDelta))
                .append("\n");
        sb.append("		maxTrailingBelowDelta: ")
                .append(toIndentedString(maxTrailingBelowDelta))
                .append("\n");
        sb.append("		maxNumOrderAmends: ").append(toIndentedString(maxNumOrderAmends)).append("\n");
        sb.append("		maxNumOrderLists: ").append(toIndentedString(maxNumOrderLists)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String filterTypeValue = getFilterType();
        if (filterTypeValue != null) {
            String filterTypeValueAsString = filterTypeValue.toString();
            valMap.put("filterType", filterTypeValueAsString);
        }
        String minPriceValue = getMinPrice();
        if (minPriceValue != null) {
            String minPriceValueAsString = minPriceValue.toString();
            valMap.put("minPrice", minPriceValueAsString);
        }
        String maxPriceValue = getMaxPrice();
        if (maxPriceValue != null) {
            String maxPriceValueAsString = maxPriceValue.toString();
            valMap.put("maxPrice", maxPriceValueAsString);
        }
        String tickSizeValue = getTickSize();
        if (tickSizeValue != null) {
            String tickSizeValueAsString = tickSizeValue.toString();
            valMap.put("tickSize", tickSizeValueAsString);
        }
        String multiplierUpValue = getMultiplierUp();
        if (multiplierUpValue != null) {
            String multiplierUpValueAsString = multiplierUpValue.toString();
            valMap.put("multiplierUp", multiplierUpValueAsString);
        }
        String multiplierDownValue = getMultiplierDown();
        if (multiplierDownValue != null) {
            String multiplierDownValueAsString = multiplierDownValue.toString();
            valMap.put("multiplierDown", multiplierDownValueAsString);
        }
        Long avgPriceMinsValue = getAvgPriceMins();
        if (avgPriceMinsValue != null) {
            String avgPriceMinsValueAsString = avgPriceMinsValue.toString();
            valMap.put("avgPriceMins", avgPriceMinsValueAsString);
        }
        String bidMultiplierUpValue = getBidMultiplierUp();
        if (bidMultiplierUpValue != null) {
            String bidMultiplierUpValueAsString = bidMultiplierUpValue.toString();
            valMap.put("bidMultiplierUp", bidMultiplierUpValueAsString);
        }
        String bidMultiplierDownValue = getBidMultiplierDown();
        if (bidMultiplierDownValue != null) {
            String bidMultiplierDownValueAsString = bidMultiplierDownValue.toString();
            valMap.put("bidMultiplierDown", bidMultiplierDownValueAsString);
        }
        String askMultiplierUpValue = getAskMultiplierUp();
        if (askMultiplierUpValue != null) {
            String askMultiplierUpValueAsString = askMultiplierUpValue.toString();
            valMap.put("askMultiplierUp", askMultiplierUpValueAsString);
        }
        String askMultiplierDownValue = getAskMultiplierDown();
        if (askMultiplierDownValue != null) {
            String askMultiplierDownValueAsString = askMultiplierDownValue.toString();
            valMap.put("askMultiplierDown", askMultiplierDownValueAsString);
        }
        String minQtyValue = getMinQty();
        if (minQtyValue != null) {
            String minQtyValueAsString = minQtyValue.toString();
            valMap.put("minQty", minQtyValueAsString);
        }
        String maxQtyValue = getMaxQty();
        if (maxQtyValue != null) {
            String maxQtyValueAsString = maxQtyValue.toString();
            valMap.put("maxQty", maxQtyValueAsString);
        }
        String stepSizeValue = getStepSize();
        if (stepSizeValue != null) {
            String stepSizeValueAsString = stepSizeValue.toString();
            valMap.put("stepSize", stepSizeValueAsString);
        }
        String minNotionalValue = getMinNotional();
        if (minNotionalValue != null) {
            String minNotionalValueAsString = minNotionalValue.toString();
            valMap.put("minNotional", minNotionalValueAsString);
        }
        Boolean applyToMarketValue = getApplyToMarket();
        if (applyToMarketValue != null) {
            String applyToMarketValueAsString = applyToMarketValue.toString();
            valMap.put("applyToMarket", applyToMarketValueAsString);
        }
        Boolean applyMinToMarketValue = getApplyMinToMarket();
        if (applyMinToMarketValue != null) {
            String applyMinToMarketValueAsString = applyMinToMarketValue.toString();
            valMap.put("applyMinToMarket", applyMinToMarketValueAsString);
        }
        String maxNotionalValue = getMaxNotional();
        if (maxNotionalValue != null) {
            String maxNotionalValueAsString = maxNotionalValue.toString();
            valMap.put("maxNotional", maxNotionalValueAsString);
        }
        Boolean applyMaxToMarketValue = getApplyMaxToMarket();
        if (applyMaxToMarketValue != null) {
            String applyMaxToMarketValueAsString = applyMaxToMarketValue.toString();
            valMap.put("applyMaxToMarket", applyMaxToMarketValueAsString);
        }
        Long limitValue = getLimit();
        if (limitValue != null) {
            String limitValueAsString = limitValue.toString();
            valMap.put("limit", limitValueAsString);
        }
        Long maxNumOrdersValue = getMaxNumOrders();
        if (maxNumOrdersValue != null) {
            String maxNumOrdersValueAsString = maxNumOrdersValue.toString();
            valMap.put("maxNumOrders", maxNumOrdersValueAsString);
        }
        Long maxNumAlgoOrdersValue = getMaxNumAlgoOrders();
        if (maxNumAlgoOrdersValue != null) {
            String maxNumAlgoOrdersValueAsString = maxNumAlgoOrdersValue.toString();
            valMap.put("maxNumAlgoOrders", maxNumAlgoOrdersValueAsString);
        }
        Long maxNumIcebergOrdersValue = getMaxNumIcebergOrders();
        if (maxNumIcebergOrdersValue != null) {
            String maxNumIcebergOrdersValueAsString = maxNumIcebergOrdersValue.toString();
            valMap.put("maxNumIcebergOrders", maxNumIcebergOrdersValueAsString);
        }
        String maxPositionValue = getMaxPosition();
        if (maxPositionValue != null) {
            String maxPositionValueAsString = maxPositionValue.toString();
            valMap.put("maxPosition", maxPositionValueAsString);
        }
        Long minTrailingAboveDeltaValue = getMinTrailingAboveDelta();
        if (minTrailingAboveDeltaValue != null) {
            String minTrailingAboveDeltaValueAsString = minTrailingAboveDeltaValue.toString();
            valMap.put("minTrailingAboveDelta", minTrailingAboveDeltaValueAsString);
        }
        Long maxTrailingAboveDeltaValue = getMaxTrailingAboveDelta();
        if (maxTrailingAboveDeltaValue != null) {
            String maxTrailingAboveDeltaValueAsString = maxTrailingAboveDeltaValue.toString();
            valMap.put("maxTrailingAboveDelta", maxTrailingAboveDeltaValueAsString);
        }
        Long minTrailingBelowDeltaValue = getMinTrailingBelowDelta();
        if (minTrailingBelowDeltaValue != null) {
            String minTrailingBelowDeltaValueAsString = minTrailingBelowDeltaValue.toString();
            valMap.put("minTrailingBelowDelta", minTrailingBelowDeltaValueAsString);
        }
        Long maxTrailingBelowDeltaValue = getMaxTrailingBelowDelta();
        if (maxTrailingBelowDeltaValue != null) {
            String maxTrailingBelowDeltaValueAsString = maxTrailingBelowDeltaValue.toString();
            valMap.put("maxTrailingBelowDelta", maxTrailingBelowDeltaValueAsString);
        }
        Long maxNumOrderAmendsValue = getMaxNumOrderAmends();
        if (maxNumOrderAmendsValue != null) {
            String maxNumOrderAmendsValueAsString = maxNumOrderAmendsValue.toString();
            valMap.put("maxNumOrderAmends", maxNumOrderAmendsValueAsString);
        }
        Long maxNumOrderListsValue = getMaxNumOrderLists();
        if (maxNumOrderListsValue != null) {
            String maxNumOrderListsValueAsString = maxNumOrderListsValue.toString();
            valMap.put("maxNumOrderLists", maxNumOrderListsValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object filterTypeValue = getFilterType();
        if (filterTypeValue != null) {
            valMap.put("filterType", filterTypeValue);
        }
        Object minPriceValue = getMinPrice();
        if (minPriceValue != null) {
            valMap.put("minPrice", minPriceValue);
        }
        Object maxPriceValue = getMaxPrice();
        if (maxPriceValue != null) {
            valMap.put("maxPrice", maxPriceValue);
        }
        Object tickSizeValue = getTickSize();
        if (tickSizeValue != null) {
            valMap.put("tickSize", tickSizeValue);
        }
        Object multiplierUpValue = getMultiplierUp();
        if (multiplierUpValue != null) {
            valMap.put("multiplierUp", multiplierUpValue);
        }
        Object multiplierDownValue = getMultiplierDown();
        if (multiplierDownValue != null) {
            valMap.put("multiplierDown", multiplierDownValue);
        }
        Object avgPriceMinsValue = getAvgPriceMins();
        if (avgPriceMinsValue != null) {
            valMap.put("avgPriceMins", avgPriceMinsValue);
        }
        Object bidMultiplierUpValue = getBidMultiplierUp();
        if (bidMultiplierUpValue != null) {
            valMap.put("bidMultiplierUp", bidMultiplierUpValue);
        }
        Object bidMultiplierDownValue = getBidMultiplierDown();
        if (bidMultiplierDownValue != null) {
            valMap.put("bidMultiplierDown", bidMultiplierDownValue);
        }
        Object askMultiplierUpValue = getAskMultiplierUp();
        if (askMultiplierUpValue != null) {
            valMap.put("askMultiplierUp", askMultiplierUpValue);
        }
        Object askMultiplierDownValue = getAskMultiplierDown();
        if (askMultiplierDownValue != null) {
            valMap.put("askMultiplierDown", askMultiplierDownValue);
        }
        Object minQtyValue = getMinQty();
        if (minQtyValue != null) {
            valMap.put("minQty", minQtyValue);
        }
        Object maxQtyValue = getMaxQty();
        if (maxQtyValue != null) {
            valMap.put("maxQty", maxQtyValue);
        }
        Object stepSizeValue = getStepSize();
        if (stepSizeValue != null) {
            valMap.put("stepSize", stepSizeValue);
        }
        Object minNotionalValue = getMinNotional();
        if (minNotionalValue != null) {
            valMap.put("minNotional", minNotionalValue);
        }
        Object applyToMarketValue = getApplyToMarket();
        if (applyToMarketValue != null) {
            valMap.put("applyToMarket", applyToMarketValue);
        }
        Object applyMinToMarketValue = getApplyMinToMarket();
        if (applyMinToMarketValue != null) {
            valMap.put("applyMinToMarket", applyMinToMarketValue);
        }
        Object maxNotionalValue = getMaxNotional();
        if (maxNotionalValue != null) {
            valMap.put("maxNotional", maxNotionalValue);
        }
        Object applyMaxToMarketValue = getApplyMaxToMarket();
        if (applyMaxToMarketValue != null) {
            valMap.put("applyMaxToMarket", applyMaxToMarketValue);
        }
        Object limitValue = getLimit();
        if (limitValue != null) {
            valMap.put("limit", limitValue);
        }
        Object maxNumOrdersValue = getMaxNumOrders();
        if (maxNumOrdersValue != null) {
            valMap.put("maxNumOrders", maxNumOrdersValue);
        }
        Object maxNumAlgoOrdersValue = getMaxNumAlgoOrders();
        if (maxNumAlgoOrdersValue != null) {
            valMap.put("maxNumAlgoOrders", maxNumAlgoOrdersValue);
        }
        Object maxNumIcebergOrdersValue = getMaxNumIcebergOrders();
        if (maxNumIcebergOrdersValue != null) {
            valMap.put("maxNumIcebergOrders", maxNumIcebergOrdersValue);
        }
        Object maxPositionValue = getMaxPosition();
        if (maxPositionValue != null) {
            valMap.put("maxPosition", maxPositionValue);
        }
        Object minTrailingAboveDeltaValue = getMinTrailingAboveDelta();
        if (minTrailingAboveDeltaValue != null) {
            valMap.put("minTrailingAboveDelta", minTrailingAboveDeltaValue);
        }
        Object maxTrailingAboveDeltaValue = getMaxTrailingAboveDelta();
        if (maxTrailingAboveDeltaValue != null) {
            valMap.put("maxTrailingAboveDelta", maxTrailingAboveDeltaValue);
        }
        Object minTrailingBelowDeltaValue = getMinTrailingBelowDelta();
        if (minTrailingBelowDeltaValue != null) {
            valMap.put("minTrailingBelowDelta", minTrailingBelowDeltaValue);
        }
        Object maxTrailingBelowDeltaValue = getMaxTrailingBelowDelta();
        if (maxTrailingBelowDeltaValue != null) {
            valMap.put("maxTrailingBelowDelta", maxTrailingBelowDeltaValue);
        }
        Object maxNumOrderAmendsValue = getMaxNumOrderAmends();
        if (maxNumOrderAmendsValue != null) {
            valMap.put("maxNumOrderAmends", maxNumOrderAmendsValue);
        }
        Object maxNumOrderListsValue = getMaxNumOrderLists();
        if (maxNumOrderListsValue != null) {
            valMap.put("maxNumOrderLists", maxNumOrderListsValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filterType");
        openapiFields.add("minPrice");
        openapiFields.add("maxPrice");
        openapiFields.add("tickSize");
        openapiFields.add("multiplierUp");
        openapiFields.add("multiplierDown");
        openapiFields.add("avgPriceMins");
        openapiFields.add("bidMultiplierUp");
        openapiFields.add("bidMultiplierDown");
        openapiFields.add("askMultiplierUp");
        openapiFields.add("askMultiplierDown");
        openapiFields.add("minQty");
        openapiFields.add("maxQty");
        openapiFields.add("stepSize");
        openapiFields.add("minNotional");
        openapiFields.add("applyToMarket");
        openapiFields.add("applyMinToMarket");
        openapiFields.add("maxNotional");
        openapiFields.add("applyMaxToMarket");
        openapiFields.add("limit");
        openapiFields.add("maxNumOrders");
        openapiFields.add("maxNumAlgoOrders");
        openapiFields.add("maxNumIcebergOrders");
        openapiFields.add("maxPosition");
        openapiFields.add("minTrailingAboveDelta");
        openapiFields.add("maxTrailingAboveDelta");
        openapiFields.add("minTrailingBelowDelta");
        openapiFields.add("maxTrailingBelowDelta");
        openapiFields.add("maxNumOrderAmends");
        openapiFields.add("maxNumOrderLists");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ExchangeFiltersInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeFiltersInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ExchangeFiltersInner is not found in"
                                        + " the empty JSON string",
                                ExchangeFiltersInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeFiltersInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ExchangeFiltersInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("filterType") != null && !jsonObj.get("filterType").isJsonNull())
                && !jsonObj.get("filterType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `filterType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("filterType").toString()));
        }
        if ((jsonObj.get("minPrice") != null && !jsonObj.get("minPrice").isJsonNull())
                && !jsonObj.get("minPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("minPrice").toString()));
        }
        if ((jsonObj.get("maxPrice") != null && !jsonObj.get("maxPrice").isJsonNull())
                && !jsonObj.get("maxPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxPrice").toString()));
        }
        if ((jsonObj.get("tickSize") != null && !jsonObj.get("tickSize").isJsonNull())
                && !jsonObj.get("tickSize").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tickSize` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("tickSize").toString()));
        }
        if ((jsonObj.get("multiplierUp") != null && !jsonObj.get("multiplierUp").isJsonNull())
                && !jsonObj.get("multiplierUp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `multiplierUp` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("multiplierUp").toString()));
        }
        if ((jsonObj.get("multiplierDown") != null && !jsonObj.get("multiplierDown").isJsonNull())
                && !jsonObj.get("multiplierDown").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `multiplierDown` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("multiplierDown").toString()));
        }
        if ((jsonObj.get("bidMultiplierUp") != null && !jsonObj.get("bidMultiplierUp").isJsonNull())
                && !jsonObj.get("bidMultiplierUp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidMultiplierUp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("bidMultiplierUp").toString()));
        }
        if ((jsonObj.get("bidMultiplierDown") != null
                        && !jsonObj.get("bidMultiplierDown").isJsonNull())
                && !jsonObj.get("bidMultiplierDown").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidMultiplierDown` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("bidMultiplierDown").toString()));
        }
        if ((jsonObj.get("askMultiplierUp") != null && !jsonObj.get("askMultiplierUp").isJsonNull())
                && !jsonObj.get("askMultiplierUp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askMultiplierUp` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("askMultiplierUp").toString()));
        }
        if ((jsonObj.get("askMultiplierDown") != null
                        && !jsonObj.get("askMultiplierDown").isJsonNull())
                && !jsonObj.get("askMultiplierDown").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askMultiplierDown` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("askMultiplierDown").toString()));
        }
        if ((jsonObj.get("minQty") != null && !jsonObj.get("minQty").isJsonNull())
                && !jsonObj.get("minQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("minQty").toString()));
        }
        if ((jsonObj.get("maxQty") != null && !jsonObj.get("maxQty").isJsonNull())
                && !jsonObj.get("maxQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("maxQty").toString()));
        }
        if ((jsonObj.get("stepSize") != null && !jsonObj.get("stepSize").isJsonNull())
                && !jsonObj.get("stepSize").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stepSize` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("stepSize").toString()));
        }
        if ((jsonObj.get("minNotional") != null && !jsonObj.get("minNotional").isJsonNull())
                && !jsonObj.get("minNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("minNotional").toString()));
        }
        if ((jsonObj.get("maxNotional") != null && !jsonObj.get("maxNotional").isJsonNull())
                && !jsonObj.get("maxNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxNotional").toString()));
        }
        if ((jsonObj.get("maxPosition") != null && !jsonObj.get("maxPosition").isJsonNull())
                && !jsonObj.get("maxPosition").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxPosition` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxPosition").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeFiltersInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ExchangeFiltersInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeFiltersInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ExchangeFiltersInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeFiltersInner>() {
                        @Override
                        public void write(JsonWriter out, ExchangeFiltersInner value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeFiltersInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeFiltersInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeFiltersInner
     * @throws IOException if the JSON string is invalid with respect to ExchangeFiltersInner
     */
    public static ExchangeFiltersInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ExchangeFiltersInner.class);
    }

    /**
     * Convert an instance of ExchangeFiltersInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderAmendKeepPriorityResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderAmendKeepPriorityResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_TRANSACT_TIME = "transactTime";

    @SerializedName(SERIALIZED_NAME_TRANSACT_TIME)
    @jakarta.annotation.Nullable
    private Long transactTime;

    public static final String SERIALIZED_NAME_EXECUTION_ID = "executionId";

    @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
    @jakarta.annotation.Nullable
    private Long executionId;

    public static final String SERIALIZED_NAME_AMENDED_ORDER = "amendedOrder";

    @SerializedName(SERIALIZED_NAME_AMENDED_ORDER)
    @jakarta.annotation.Nullable
    private OrderAmendKeepPriorityResponseResultAmendedOrder amendedOrder;

    public static final String SERIALIZED_NAME_LIST_STATUS = "listStatus";

    @SerializedName(SERIALIZED_NAME_LIST_STATUS)
    @jakarta.annotation.Nullable
    private OrderAmendKeepPriorityResponseResultListStatus listStatus;

    public OrderAmendKeepPriorityResponseResult() {}

    public OrderAmendKeepPriorityResponseResult transactTime(
            @jakarta.annotation.Nullable Long transactTime) {
        this.transactTime = transactTime;
        return this;
    }

    /**
     * Get transactTime
     *
     * @return transactTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactTime() {
        return transactTime;
    }

    public void setTransactTime(@jakarta.annotation.Nullable Long transactTime) {
        this.transactTime = transactTime;
    }

    public OrderAmendKeepPriorityResponseResult executionId(
            @jakarta.annotation.Nullable Long executionId) {
        this.executionId = executionId;
        return this;
    }

    /**
     * Get executionId
     *
     * @return executionId
     */
    @jakarta.annotation.Nullable
    public Long getExecutionId() {
        return executionId;
    }

    public void setExecutionId(@jakarta.annotation.Nullable Long executionId) {
        this.executionId = executionId;
    }

    public OrderAmendKeepPriorityResponseResult amendedOrder(
            @jakarta.annotation.Nullable
                    OrderAmendKeepPriorityResponseResultAmendedOrder amendedOrder) {
        this.amendedOrder = amendedOrder;
        return this;
    }

    /**
     * Get amendedOrder
     *
     * @return amendedOrder
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderAmendKeepPriorityResponseResultAmendedOrder getAmendedOrder() {
        return amendedOrder;
    }

    public void setAmendedOrder(
            @jakarta.annotation.Nullable
                    OrderAmendKeepPriorityResponseResultAmendedOrder amendedOrder) {
        this.amendedOrder = amendedOrder;
    }

    public OrderAmendKeepPriorityResponseResult listStatus(
            @jakarta.annotation.Nullable
                    OrderAmendKeepPriorityResponseResultListStatus listStatus) {
        this.listStatus = listStatus;
        return this;
    }

    /**
     * Get listStatus
     *
     * @return listStatus
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderAmendKeepPriorityResponseResultListStatus getListStatus() {
        return listStatus;
    }

    public void setListStatus(
            @jakarta.annotation.Nullable
                    OrderAmendKeepPriorityResponseResultListStatus listStatus) {
        this.listStatus = listStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderAmendKeepPriorityResponseResult orderAmendKeepPriorityResponseResult =
                (OrderAmendKeepPriorityResponseResult) o;
        return Objects.equals(this.transactTime, orderAmendKeepPriorityResponseResult.transactTime)
                && Objects.equals(
                        this.executionId, orderAmendKeepPriorityResponseResult.executionId)
                && Objects.equals(
                        this.amendedOrder, orderAmendKeepPriorityResponseResult.amendedOrder)
                && Objects.equals(this.listStatus, orderAmendKeepPriorityResponseResult.listStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(transactTime, executionId, amendedOrder, listStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderAmendKeepPriorityResponseResult {\n");
        sb.append("		transactTime: ").append(toIndentedString(transactTime)).append("\n");
        sb.append("		executionId: ").append(toIndentedString(executionId)).append("\n");
        sb.append("		amendedOrder: ").append(toIndentedString(amendedOrder)).append("\n");
        sb.append("		listStatus: ").append(toIndentedString(listStatus)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long transactTimeValue = getTransactTime();
        if (transactTimeValue != null) {
            String transactTimeValueAsString = transactTimeValue.toString();
            valMap.put("transactTime", transactTimeValueAsString);
        }
        Long executionIdValue = getExecutionId();
        if (executionIdValue != null) {
            String executionIdValueAsString = executionIdValue.toString();
            valMap.put("executionId", executionIdValueAsString);
        }
        OrderAmendKeepPriorityResponseResultAmendedOrder amendedOrderValue = getAmendedOrder();
        if (amendedOrderValue != null) {
            String amendedOrderValueAsString = JSON.getGson().toJson(amendedOrderValue);
            valMap.put("amendedOrder", amendedOrderValueAsString);
        }
        OrderAmendKeepPriorityResponseResultListStatus listStatusValue = getListStatus();
        if (listStatusValue != null) {
            String listStatusValueAsString = JSON.getGson().toJson(listStatusValue);
            valMap.put("listStatus", listStatusValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object transactTimeValue = getTransactTime();
        if (transactTimeValue != null) {
            valMap.put("transactTime", transactTimeValue);
        }
        Object executionIdValue = getExecutionId();
        if (executionIdValue != null) {
            valMap.put("executionId", executionIdValue);
        }
        Object amendedOrderValue = getAmendedOrder();
        if (amendedOrderValue != null) {
            valMap.put("amendedOrder", amendedOrderValue);
        }
        Object listStatusValue = getListStatus();
        if (listStatusValue != null) {
            valMap.put("listStatus", listStatusValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("transactTime");
        openapiFields.add("executionId");
        openapiFields.add("amendedOrder");
        openapiFields.add("listStatus");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OrderAmendKeepPriorityResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderAmendKeepPriorityResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderAmendKeepPriorityResponseResult"
                                        + " is not found in the empty JSON string",
                                OrderAmendKeepPriorityResponseResult.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderAmendKeepPriorityResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OrderAmendKeepPriorityResponseResult` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `amendedOrder`
        if (jsonObj.get("amendedOrder") != null && !jsonObj.get("amendedOrder").isJsonNull()) {
            OrderAmendKeepPriorityResponseResultAmendedOrder.validateJsonElement(
                    jsonObj.get("amendedOrder"));
        }
        // validate the optional field `listStatus`
        if (jsonObj.get("listStatus") != null && !jsonObj.get("listStatus").isJsonNull()) {
            OrderAmendKeepPriorityResponseResultListStatus.validateJsonElement(
                    jsonObj.get("listStatus"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderAmendKeepPriorityResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderAmendKeepPriorityResponseResult'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderAmendKeepPriorityResponseResult> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OrderAmendKeepPriorityResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderAmendKeepPriorityResponseResult>() {
                        @Override
                        public void write(
                                JsonWriter out, OrderAmendKeepPriorityResponseResult value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderAmendKeepPriorityResponseResult read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderAmendKeepPriorityResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderAmendKeepPriorityResponseResult
     * @throws IOException if the JSON string is invalid with respect to
     *     OrderAmendKeepPriorityResponseResult
     */
    public static OrderAmendKeepPriorityResponseResult fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderAmendKeepPriorityResponseResult.class);
    }

    /**
     * Convert an instance of OrderAmendKeepPriorityResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Margin Trading WebSocket Market Streams
 * OpenAPI Specification for the Binance Margin Trading WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.margin_trading.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** Executionreport */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class Executionreport extends BaseDTO {
    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String cLowerCase;

    public static final String SERIALIZED_NAME_S = "S";

    @SerializedName(SERIALIZED_NAME_S)
    @jakarta.annotation.Nullable
    private String S;

    public static final String SERIALIZED_NAME_O_LOWER_CASE = "o";

    @SerializedName(SERIALIZED_NAME_O_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String oLowerCase;

    public static final String SERIALIZED_NAME_F_LOWER_CASE = "f";

    @SerializedName(SERIALIZED_NAME_F_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String fLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_P = "P";

    @SerializedName(SERIALIZED_NAME_P)
    @jakarta.annotation.Nullable
    private String P;

    public static final String SERIALIZED_NAME_F = "F";

    @SerializedName(SERIALIZED_NAME_F)
    @jakarta.annotation.Nullable
    private String F;

    public static final String SERIALIZED_NAME_G_LOWER_CASE = "g";

    @SerializedName(SERIALIZED_NAME_G_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long gLowerCase;

    public static final String SERIALIZED_NAME_C = "C";

    @SerializedName(SERIALIZED_NAME_C)
    @jakarta.annotation.Nullable
    private String C;

    public static final String SERIALIZED_NAME_X_LOWER_CASE = "x";

    @SerializedName(SERIALIZED_NAME_X_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String xLowerCase;

    public static final String SERIALIZED_NAME_X = "X";

    @SerializedName(SERIALIZED_NAME_X)
    @jakarta.annotation.Nullable
    private String X;

    public static final String SERIALIZED_NAME_R_LOWER_CASE = "r";

    @SerializedName(SERIALIZED_NAME_R_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String rLowerCase;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long iLowerCase;

    public static final String SERIALIZED_NAME_L_LOWER_CASE = "l";

    @SerializedName(SERIALIZED_NAME_L_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String lLowerCase;

    public static final String SERIALIZED_NAME_Z_LOWER_CASE = "z";

    @SerializedName(SERIALIZED_NAME_Z_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String zLowerCase;

    public static final String SERIALIZED_NAME_L = "L";

    @SerializedName(SERIALIZED_NAME_L)
    @jakarta.annotation.Nullable
    private String L;

    public static final String SERIALIZED_NAME_N_LOWER_CASE = "n";

    @SerializedName(SERIALIZED_NAME_N_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String nLowerCase;

    public static final String SERIALIZED_NAME_N = "N";

    @SerializedName(SERIALIZED_NAME_N)
    @jakarta.annotation.Nullable
    private String N;

    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public static final String SERIALIZED_NAME_T_LOWER_CASE = "t";

    @SerializedName(SERIALIZED_NAME_T_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long tLowerCase;

    public static final String SERIALIZED_NAME_I = "I";

    @SerializedName(SERIALIZED_NAME_I)
    @jakarta.annotation.Nullable
    private Long I;

    public static final String SERIALIZED_NAME_W_LOWER_CASE = "w";

    @SerializedName(SERIALIZED_NAME_W_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Boolean wLowerCase;

    public static final String SERIALIZED_NAME_M_LOWER_CASE = "m";

    @SerializedName(SERIALIZED_NAME_M_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Boolean mLowerCase;

    public static final String SERIALIZED_NAME_M = "M";

    @SerializedName(SERIALIZED_NAME_M)
    @jakarta.annotation.Nullable
    private Boolean M;

    public static final String SERIALIZED_NAME_O = "O";

    @SerializedName(SERIALIZED_NAME_O)
    @jakarta.annotation.Nullable
    private Long O;

    public static final String SERIALIZED_NAME_Z = "Z";

    @SerializedName(SERIALIZED_NAME_Z)
    @jakarta.annotation.Nullable
    private String Z;

    public static final String SERIALIZED_NAME_Y = "Y";

    @SerializedName(SERIALIZED_NAME_Y)
    @jakarta.annotation.Nullable
    private String Y;

    public static final String SERIALIZED_NAME_Q = "Q";

    @SerializedName(SERIALIZED_NAME_Q)
    @jakarta.annotation.Nullable
    private String Q;

    public static final String SERIALIZED_NAME_W = "W";

    @SerializedName(SERIALIZED_NAME_W)
    @jakarta.annotation.Nullable
    private Long W;

    public static final String SERIALIZED_NAME_V = "V";

    @SerializedName(SERIALIZED_NAME_V)
    @jakarta.annotation.Nullable
    private String V;

    public static final String SERIALIZED_NAME_D_LOWER_CASE = "d";

    @SerializedName(SERIALIZED_NAME_D_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String dLowerCase;

    public static final String SERIALIZED_NAME_D = "D";

    @SerializedName(SERIALIZED_NAME_D)
    @jakarta.annotation.Nullable
    private String D;

    public static final String SERIALIZED_NAME_J_LOWER_CASE = "j";

    @SerializedName(SERIALIZED_NAME_J_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String jLowerCase;

    public static final String SERIALIZED_NAME_J = "J";

    @SerializedName(SERIALIZED_NAME_J)
    @jakarta.annotation.Nullable
    private String J;

    public static final String SERIALIZED_NAME_V_LOWER_CASE = "v";

    @SerializedName(SERIALIZED_NAME_V_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String vLowerCase;

    public static final String SERIALIZED_NAME_A = "A";

    @SerializedName(SERIALIZED_NAME_A)
    @jakarta.annotation.Nullable
    private String A;

    public static final String SERIALIZED_NAME_B = "B";

    @SerializedName(SERIALIZED_NAME_B)
    @jakarta.annotation.Nullable
    private String B;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String uLowerCase;

    public static final String SERIALIZED_NAME_U = "U";

    @SerializedName(SERIALIZED_NAME_U)
    @jakarta.annotation.Nullable
    private String U;

    public static final String SERIALIZED_NAME_CS = "Cs";

    @SerializedName(SERIALIZED_NAME_CS)
    @jakarta.annotation.Nullable
    private String cs;

    public static final String SERIALIZED_NAME_PL = "pl";

    @SerializedName(SERIALIZED_NAME_PL)
    @jakarta.annotation.Nullable
    private String pl;

    public static final String SERIALIZED_NAME_P_L = "pL";

    @SerializedName(SERIALIZED_NAME_P_L)
    @jakarta.annotation.Nullable
    private String pL;

    public static final String SERIALIZED_NAME_P_Y = "pY";

    @SerializedName(SERIALIZED_NAME_P_Y)
    @jakarta.annotation.Nullable
    private String pY;

    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String bLowerCase;

    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String aLowerCase;

    public static final String SERIALIZED_NAME_K_LOWER_CASE = "k";

    @SerializedName(SERIALIZED_NAME_K_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String kLowerCase;

    public static final String SERIALIZED_NAME_U_S = "uS";

    @SerializedName(SERIALIZED_NAME_U_S)
    @jakarta.annotation.Nullable
    private Boolean uS;

    public Executionreport() {}

    public Executionreport E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public Executionreport sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public Executionreport cLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    public String getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    public Executionreport S(@jakarta.annotation.Nullable String S) {
        this.S = S;
        return this;
    }

    /**
     * Get S
     *
     * @return S
     */
    @jakarta.annotation.Nullable
    public String getS() {
        return S;
    }

    public void setS(@jakarta.annotation.Nullable String S) {
        this.S = S;
    }

    public Executionreport oLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
        return this;
    }

    /**
     * Get oLowerCase
     *
     * @return oLowerCase
     */
    @jakarta.annotation.Nullable
    public String getoLowerCase() {
        return oLowerCase;
    }

    public void setoLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
    }

    public Executionreport fLowerCase(@jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
        return this;
    }

    /**
     * Get fLowerCase
     *
     * @return fLowerCase
     */
    @jakarta.annotation.Nullable
    public String getfLowerCase() {
        return fLowerCase;
    }

    public void setfLowerCase(@jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
    }

    public Executionreport qLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public Executionreport pLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public Executionreport P(@jakarta.annotation.Nullable String P) {
        this.P = P;
        return this;
    }

    /**
     * Get P
     *
     * @return P
     */
    @jakarta.annotation.Nullable
    public String getP() {
        return P;
    }

    public void setP(@jakarta.annotation.Nullable String P) {
        this.P = P;
    }

    public Executionreport F(@jakarta.annotation.Nullable String F) {
        this.F = F;
        return this;
    }

    /**
     * Get F
     *
     * @return F
     */
    @jakarta.annotation.Nullable
    public String getF() {
        return F;
    }

    public void setF(@jakarta.annotation.Nullable String F) {
        this.F = F;
    }

    public Executionreport gLowerCase(@jakarta.annotation.Nullable Long gLowerCase) {
        this.gLowerCase = gLowerCase;
        return this;
    }

    /**
     * Get gLowerCase
     *
     * @return gLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getgLowerCase() {
        return gLowerCase;
    }

    public void setgLowerCase(@jakarta.annotation.Nullable Long gLowerCase) {
        this.gLowerCase = gLowerCase;
    }

    public Executionreport C(@jakarta.annotation.Nullable String C) {
        this.C = C;
        return this;
    }

    /**
     * Get C
     *
     * @return C
     */
    @jakarta.annotation.Nullable
    public String getC() {
        return C;
    }

    public void setC(@jakarta.annotation.Nullable String C) {
        this.C = C;
    }

    public Executionreport xLowerCase(@jakarta.annotation.Nullable String xLowerCase) {
        this.xLowerCase = xLowerCase;
        return this;
    }

    /**
     * Get xLowerCase
     *
     * @return xLowerCase
     */
    @jakarta.annotation.Nullable
    public String getxLowerCase() {
        return xLowerCase;
    }

    public void setxLowerCase(@jakarta.annotation.Nullable String xLowerCase) {
        this.xLowerCase = xLowerCase;
    }

    public Executionreport X(@jakarta.annotation.Nullable String X) {
        this.X = X;
        return this;
    }

    /**
     * Get X
     *
     * @return X
     */
    @jakarta.annotation.Nullable
    public String getX() {
        return X;
    }

    public void setX(@jakarta.annotation.Nullable String X) {
        this.X = X;
    }

    public Executionreport rLowerCase(@jakarta.annotation.Nullable String rLowerCase) {
        this.rLowerCase = rLowerCase;
        return this;
    }

    /**
     * Get rLowerCase
     *
     * @return rLowerCase
     */
    @jakarta.annotation.Nullable
    public String getrLowerCase() {
        return rLowerCase;
    }

    public void setrLowerCase(@jakarta.annotation.Nullable String rLowerCase) {
        this.rLowerCase = rLowerCase;
    }

    public Executionreport iLowerCase(@jakarta.annotation.Nullable Long iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable Long iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    public Executionreport lLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
        return this;
    }

    /**
     * Get lLowerCase
     *
     * @return lLowerCase
     */
    @jakarta.annotation.Nullable
    public String getlLowerCase() {
        return lLowerCase;
    }

    public void setlLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
    }

    public Executionreport zLowerCase(@jakarta.annotation.Nullable String zLowerCase) {
        this.zLowerCase = zLowerCase;
        return this;
    }

    /**
     * Get zLowerCase
     *
     * @return zLowerCase
     */
    @jakarta.annotation.Nullable
    public String getzLowerCase() {
        return zLowerCase;
    }

    public void setzLowerCase(@jakarta.annotation.Nullable String zLowerCase) {
        this.zLowerCase = zLowerCase;
    }

    public Executionreport L(@jakarta.annotation.Nullable String L) {
        this.L = L;
        return this;
    }

    /**
     * Get L
     *
     * @return L
     */
    @jakarta.annotation.Nullable
    public String getL() {
        return L;
    }

    public void setL(@jakarta.annotation.Nullable String L) {
        this.L = L;
    }

    public Executionreport nLowerCase(@jakarta.annotation.Nullable String nLowerCase) {
        this.nLowerCase = nLowerCase;
        return this;
    }

    /**
     * Get nLowerCase
     *
     * @return nLowerCase
     */
    @jakarta.annotation.Nullable
    public String getnLowerCase() {
        return nLowerCase;
    }

    public void setnLowerCase(@jakarta.annotation.Nullable String nLowerCase) {
        this.nLowerCase = nLowerCase;
    }

    public Executionreport N(@jakarta.annotation.Nullable String N) {
        this.N = N;
        return this;
    }

    /**
     * Get N
     *
     * @return N
     */
    @jakarta.annotation.Nullable
    public String getN() {
        return N;
    }

    public void setN(@jakarta.annotation.Nullable String N) {
        this.N = N;
    }

    public Executionreport T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    public Executionreport tLowerCase(@jakarta.annotation.Nullable Long tLowerCase) {
        this.tLowerCase = tLowerCase;
        return this;
    }

    /**
     * Get tLowerCase
     *
     * @return tLowerCase
     */
    @jakarta.annotation.Nullable
    public Long gettLowerCase() {
        return tLowerCase;
    }

    public void settLowerCase(@jakarta.annotation.Nullable Long tLowerCase) {
        this.tLowerCase = tLowerCase;
    }

    public Executionreport I(@jakarta.annotation.Nullable Long I) {
        this.I = I;
        return this;
    }

    /**
     * Get I
     *
     * @return I
     */
    @jakarta.annotation.Nullable
    public Long getI() {
        return I;
    }

    public void setI(@jakarta.annotation.Nullable Long I) {
        this.I = I;
    }

    public Executionreport wLowerCase(@jakarta.annotation.Nullable Boolean wLowerCase) {
        this.wLowerCase = wLowerCase;
        return this;
    }

    /**
     * Get wLowerCase
     *
     * @return wLowerCase
     */
    @jakarta.annotation.Nullable
    public Boolean getwLowerCase() {
        return wLowerCase;
    }

    public void setwLowerCase(@jakarta.annotation.Nullable Boolean wLowerCase) {
        this.wLowerCase = wLowerCase;
    }

    public Executionreport mLowerCase(@jakarta.annotation.Nullable Boolean mLowerCase) {
        this.mLowerCase = mLowerCase;
        return this;
    }

    /**
     * Get mLowerCase
     *
     * @return mLowerCase
     */
    @jakarta.annotation.Nullable
    public Boolean getmLowerCase() {
        return mLowerCase;
    }

    public void setmLowerCase(@jakarta.annotation.Nullable Boolean mLowerCase) {
        this.mLowerCase = mLowerCase;
    }

    public Executionreport M(@jakarta.annotation.Nullable Boolean M) {
        this.M = M;
        return this;
    }

    /**
     * Get M
     *
     * @return M
     */
    @jakarta.annotation.Nullable
    public Boolean getM() {
        return M;
    }

    public void setM(@jakarta.annotation.Nullable Boolean M) {
        this.M = M;
    }

    public Executionreport O(@jakarta.annotation.Nullable Long O) {
        this.O = O;
        return this;
    }

    /**
     * Get O
     *
     * @return O
     */
    @jakarta.annotation.Nullable
    public Long getO() {
        return O;
    }

    public void setO(@jakarta.annotation.Nullable Long O) {
        this.O = O;
    }

    public Executionreport Z(@jakarta.annotation.Nullable String Z) {
        this.Z = Z;
        return this;
    }

    /**
     * Get Z
     *
     * @return Z
     */
    @jakarta.annotation.Nullable
    public String getZ() {
        return Z;
    }

    public void setZ(@jakarta.annotation.Nullable String Z) {
        this.Z = Z;
    }

    public Executionreport Y(@jakarta.annotation.Nullable String Y) {
        this.Y = Y;
        return this;
    }

    /**
     * Get Y
     *
     * @return Y
     */
    @jakarta.annotation.Nullable
    public String getY() {
        return Y;
    }

    public void setY(@jakarta.annotation.Nullable String Y) {
        this.Y = Y;
    }

    public Executionreport Q(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
        return this;
    }

    /**
     * Get Q
     *
     * @return Q
     */
    @jakarta.annotation.Nullable
    public String getQ() {
        return Q;
    }

    public void setQ(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
    }

    public Executionreport W(@jakarta.annotation.Nullable Long W) {
        this.W = W;
        return this;
    }

    /**
     * Get W
     *
     * @return W
     */
    @jakarta.annotation.Nullable
    public Long getW() {
        return W;
    }

    public void setW(@jakarta.annotation.Nullable Long W) {
        this.W = W;
    }

    public Executionreport V(@jakarta.annotation.Nullable String V) {
        this.V = V;
        return this;
    }

    /**
     * Get V
     *
     * @return V
     */
    @jakarta.annotation.Nullable
    public String getV() {
        return V;
    }

    public void setV(@jakarta.annotation.Nullable String V) {
        this.V = V;
    }

    public Executionreport dLowerCase(@jakarta.annotation.Nullable String dLowerCase) {
        this.dLowerCase = dLowerCase;
        return this;
    }

    /**
     * Get dLowerCase
     *
     * @return dLowerCase
     */
    @jakarta.annotation.Nullable
    public String getdLowerCase() {
        return dLowerCase;
    }

    public void setdLowerCase(@jakarta.annotation.Nullable String dLowerCase) {
        this.dLowerCase = dLowerCase;
    }

    public Executionreport D(@jakarta.annotation.Nullable String D) {
        this.D = D;
        return this;
    }

    /**
     * Get D
     *
     * @return D
     */
    @jakarta.annotation.Nullable
    public String getD() {
        return D;
    }

    public void setD(@jakarta.annotation.Nullable String D) {
        this.D = D;
    }

    public Executionreport jLowerCase(@jakarta.annotation.Nullable String jLowerCase) {
        this.jLowerCase = jLowerCase;
        return this;
    }

    /**
     * Get jLowerCase
     *
     * @return jLowerCase
     */
    @jakarta.annotation.Nullable
    public String getjLowerCase() {
        return jLowerCase;
    }

    public void setjLowerCase(@jakarta.annotation.Nullable String jLowerCase) {
        this.jLowerCase = jLowerCase;
    }

    public Executionreport J(@jakarta.annotation.Nullable String J) {
        this.J = J;
        return this;
    }

    /**
     * Get J
     *
     * @return J
     */
    @jakarta.annotation.Nullable
    public String getJ() {
        return J;
    }

    public void setJ(@jakarta.annotation.Nullable String J) {
        this.J = J;
    }

    public Executionreport vLowerCase(@jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
        return this;
    }

    /**
     * Get vLowerCase
     *
     * @return vLowerCase
     */
    @jakarta.annotation.Nullable
    public String getvLowerCase() {
        return vLowerCase;
    }

    public void setvLowerCase(@jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
    }

    public Executionreport A(@jakarta.annotation.Nullable String A) {
        this.A = A;
        return this;
    }

    /**
     * Get A
     *
     * @return A
     */
    @jakarta.annotation.Nullable
    public String getA() {
        return A;
    }

    public void setA(@jakarta.annotation.Nullable String A) {
        this.A = A;
    }

    public Executionreport B(@jakarta.annotation.Nullable String B) {
        this.B = B;
        return this;
    }

    /**
     * Get B
     *
     * @return B
     */
    @jakarta.annotation.Nullable
    public String getB() {
        return B;
    }

    public void setB(@jakarta.annotation.Nullable String B) {
        this.B = B;
    }

    public Executionreport uLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public String getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public Executionreport U(@jakarta.annotation.Nullable String U) {
        this.U = U;
        return this;
    }

    /**
     * Get U
     *
     * @return U
     */
    @jakarta.annotation.Nullable
    public String getU() {
        return U;
    }

    public void setU(@jakarta.annotation.Nullable String U) {
        this.U = U;
    }

    public Executionreport cs(@jakarta.annotation.Nullable String cs) {
        this.cs = cs;
        return this;
    }

    /**
     * Get cs
     *
     * @return cs
     */
    @jakarta.annotation.Nullable
    public String getCs() {
        return cs;
    }

    public void setCs(@jakarta.annotation.Nullable String cs) {
        this.cs = cs;
    }

    public Executionreport pl(@jakarta.annotation.Nullable String pl) {
        this.pl = pl;
        return this;
    }

    /**
     * Get pl
     *
     * @return pl
     */
    @jakarta.annotation.Nullable
    public String getPl() {
        return pl;
    }

    public void setPl(@jakarta.annotation.Nullable String pl) {
        this.pl = pl;
    }

    public Executionreport pL(@jakarta.annotation.Nullable String pL) {
        this.pL = pL;
        return this;
    }

    /**
     * Get pL
     *
     * @return pL
     */
    @jakarta.annotation.Nullable
    public String getpL() {
        return pL;
    }

    public void setpL(@jakarta.annotation.Nullable String pL) {
        this.pL = pL;
    }

    public Executionreport pY(@jakarta.annotation.Nullable String pY) {
        this.pY = pY;
        return this;
    }

    /**
     * Get pY
     *
     * @return pY
     */
    @jakarta.annotation.Nullable
    public String getpY() {
        return pY;
    }

    public void setpY(@jakarta.annotation.Nullable String pY) {
        this.pY = pY;
    }

    public Executionreport bLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    public String getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public Executionreport aLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    public String getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    public Executionreport kLowerCase(@jakarta.annotation.Nullable String kLowerCase) {
        this.kLowerCase = kLowerCase;
        return this;
    }

    /**
     * Get kLowerCase
     *
     * @return kLowerCase
     */
    @jakarta.annotation.Nullable
    public String getkLowerCase() {
        return kLowerCase;
    }

    public void setkLowerCase(@jakarta.annotation.Nullable String kLowerCase) {
        this.kLowerCase = kLowerCase;
    }

    public Executionreport uS(@jakarta.annotation.Nullable Boolean uS) {
        this.uS = uS;
        return this;
    }

    /**
     * Get uS
     *
     * @return uS
     */
    @jakarta.annotation.Nullable
    public Boolean getuS() {
        return uS;
    }

    public void setuS(@jakarta.annotation.Nullable Boolean uS) {
        this.uS = uS;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Executionreport executionreport = (Executionreport) o;
        return Objects.equals(this.E, executionreport.E)
                && Objects.equals(this.sLowerCase, executionreport.sLowerCase)
                && Objects.equals(this.cLowerCase, executionreport.cLowerCase)
                && Objects.equals(this.S, executionreport.S)
                && Objects.equals(this.oLowerCase, executionreport.oLowerCase)
                && Objects.equals(this.fLowerCase, executionreport.fLowerCase)
                && Objects.equals(this.qLowerCase, executionreport.qLowerCase)
                && Objects.equals(this.pLowerCase, executionreport.pLowerCase)
                && Objects.equals(this.P, executionreport.P)
                && Objects.equals(this.F, executionreport.F)
                && Objects.equals(this.gLowerCase, executionreport.gLowerCase)
                && Objects.equals(this.C, executionreport.C)
                && Objects.equals(this.xLowerCase, executionreport.xLowerCase)
                && Objects.equals(this.X, executionreport.X)
                && Objects.equals(this.rLowerCase, executionreport.rLowerCase)
                && Objects.equals(this.iLowerCase, executionreport.iLowerCase)
                && Objects.equals(this.lLowerCase, executionreport.lLowerCase)
                && Objects.equals(this.zLowerCase, executionreport.zLowerCase)
                && Objects.equals(this.L, executionreport.L)
                && Objects.equals(this.nLowerCase, executionreport.nLowerCase)
                && Objects.equals(this.N, executionreport.N)
                && Objects.equals(this.T, executionreport.T)
                && Objects.equals(this.tLowerCase, executionreport.tLowerCase)
                && Objects.equals(this.I, executionreport.I)
                && Objects.equals(this.wLowerCase, executionreport.wLowerCase)
                && Objects.equals(this.mLowerCase, executionreport.mLowerCase)
                && Objects.equals(this.M, executionreport.M)
                && Objects.equals(this.O, executionreport.O)
                && Objects.equals(this.Z, executionreport.Z)
                && Objects.equals(this.Y, executionreport.Y)
                && Objects.equals(this.Q, executionreport.Q)
                && Objects.equals(this.W, executionreport.W)
                && Objects.equals(this.V, executionreport.V)
                && Objects.equals(this.dLowerCase, executionreport.dLowerCase)
                && Objects.equals(this.D, executionreport.D)
                && Objects.equals(this.jLowerCase, executionreport.jLowerCase)
                && Objects.equals(this.J, executionreport.J)
                && Objects.equals(this.vLowerCase, executionreport.vLowerCase)
                && Objects.equals(this.A, executionreport.A)
                && Objects.equals(this.B, executionreport.B)
                && Objects.equals(this.uLowerCase, executionreport.uLowerCase)
                && Objects.equals(this.U, executionreport.U)
                && Objects.equals(this.cs, executionreport.cs)
                && Objects.equals(this.pl, executionreport.pl)
                && Objects.equals(this.pL, executionreport.pL)
                && Objects.equals(this.pY, executionreport.pY)
                && Objects.equals(this.bLowerCase, executionreport.bLowerCase)
                && Objects.equals(this.aLowerCase, executionreport.aLowerCase)
                && Objects.equals(this.kLowerCase, executionreport.kLowerCase)
                && Objects.equals(this.uS, executionreport.uS);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                E,
                sLowerCase,
                cLowerCase,
                S,
                oLowerCase,
                fLowerCase,
                qLowerCase,
                pLowerCase,
                P,
                F,
                gLowerCase,
                C,
                xLowerCase,
                X,
                rLowerCase,
                iLowerCase,
                lLowerCase,
                zLowerCase,
                L,
                nLowerCase,
                N,
                T,
                tLowerCase,
                I,
                wLowerCase,
                mLowerCase,
                M,
                O,
                Z,
                Y,
                Q,
                W,
                V,
                dLowerCase,
                D,
                jLowerCase,
                J,
                vLowerCase,
                A,
                B,
                uLowerCase,
                U,
                cs,
                pl,
                pL,
                pY,
                bLowerCase,
                aLowerCase,
                kLowerCase,
                uS);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Executionreport {\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("		S: ").append(toIndentedString(S)).append("\n");
        sb.append("		oLowerCase: ").append(toIndentedString(oLowerCase)).append("\n");
        sb.append("		fLowerCase: ").append(toIndentedString(fLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		P: ").append(toIndentedString(P)).append("\n");
        sb.append("		F: ").append(toIndentedString(F)).append("\n");
        sb.append("		gLowerCase: ").append(toIndentedString(gLowerCase)).append("\n");
        sb.append("		C: ").append(toIndentedString(C)).append("\n");
        sb.append("		xLowerCase: ").append(toIndentedString(xLowerCase)).append("\n");
        sb.append("		X: ").append(toIndentedString(X)).append("\n");
        sb.append("		rLowerCase: ").append(toIndentedString(rLowerCase)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("		lLowerCase: ").append(toIndentedString(lLowerCase)).append("\n");
        sb.append("		zLowerCase: ").append(toIndentedString(zLowerCase)).append("\n");
        sb.append("		L: ").append(toIndentedString(L)).append("\n");
        sb.append("		nLowerCase: ").append(toIndentedString(nLowerCase)).append("\n");
        sb.append("		N: ").append(toIndentedString(N)).append("\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("		tLowerCase: ").append(toIndentedString(tLowerCase)).append("\n");
        sb.append("		I: ").append(toIndentedString(I)).append("\n");
        sb.append("		wLowerCase: ").append(toIndentedString(wLowerCase)).append("\n");
        sb.append("		mLowerCase: ").append(toIndentedString(mLowerCase)).append("\n");
        sb.append("		M: ").append(toIndentedString(M)).append("\n");
        sb.append("		O: ").append(toIndentedString(O)).append("\n");
        sb.append("		Z: ").append(toIndentedString(Z)).append("\n");
        sb.append("		Y: ").append(toIndentedString(Y)).append("\n");
        sb.append("		Q: ").append(toIndentedString(Q)).append("\n");
        sb.append("		W: ").append(toIndentedString(W)).append("\n");
        sb.append("		V: ").append(toIndentedString(V)).append("\n");
        sb.append("		dLowerCase: ").append(toIndentedString(dLowerCase)).append("\n");
        sb.append("		D: ").append(toIndentedString(D)).append("\n");
        sb.append("		jLowerCase: ").append(toIndentedString(jLowerCase)).append("\n");
        sb.append("		J: ").append(toIndentedString(J)).append("\n");
        sb.append("		vLowerCase: ").append(toIndentedString(vLowerCase)).append("\n");
        sb.append("		A: ").append(toIndentedString(A)).append("\n");
        sb.append("		B: ").append(toIndentedString(B)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		U: ").append(toIndentedString(U)).append("\n");
        sb.append("		cs: ").append(toIndentedString(cs)).append("\n");
        sb.append("		pl: ").append(toIndentedString(pl)).append("\n");
        sb.append("		pL: ").append(toIndentedString(pL)).append("\n");
        sb.append("		pY: ").append(toIndentedString(pY)).append("\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("		kLowerCase: ").append(toIndentedString(kLowerCase)).append("\n");
        sb.append("		uS: ").append(toIndentedString(uS)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = cLowerCaseValue.toString();
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }
        String SValue = getS();
        if (SValue != null) {
            String SValueAsString = SValue.toString();
            valMap.put("S", SValueAsString);
        }
        String oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            String oLowerCaseValueAsString = oLowerCaseValue.toString();
            valMap.put("oLowerCase", oLowerCaseValueAsString);
        }
        String fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            String fLowerCaseValueAsString = fLowerCaseValue.toString();
            valMap.put("fLowerCase", fLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String PValue = getP();
        if (PValue != null) {
            String PValueAsString = PValue.toString();
            valMap.put("P", PValueAsString);
        }
        String FValue = getF();
        if (FValue != null) {
            String FValueAsString = FValue.toString();
            valMap.put("F", FValueAsString);
        }
        Long gLowerCaseValue = getgLowerCase();
        if (gLowerCaseValue != null) {
            String gLowerCaseValueAsString = gLowerCaseValue.toString();
            valMap.put("gLowerCase", gLowerCaseValueAsString);
        }
        String CValue = getC();
        if (CValue != null) {
            String CValueAsString = CValue.toString();
            valMap.put("C", CValueAsString);
        }
        String xLowerCaseValue = getxLowerCase();
        if (xLowerCaseValue != null) {
            String xLowerCaseValueAsString = xLowerCaseValue.toString();
            valMap.put("xLowerCase", xLowerCaseValueAsString);
        }
        String XValue = getX();
        if (XValue != null) {
            String XValueAsString = XValue.toString();
            valMap.put("X", XValueAsString);
        }
        String rLowerCaseValue = getrLowerCase();
        if (rLowerCaseValue != null) {
            String rLowerCaseValueAsString = rLowerCaseValue.toString();
            valMap.put("rLowerCase", rLowerCaseValueAsString);
        }
        Long iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }
        String lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            String lLowerCaseValueAsString = lLowerCaseValue.toString();
            valMap.put("lLowerCase", lLowerCaseValueAsString);
        }
        String zLowerCaseValue = getzLowerCase();
        if (zLowerCaseValue != null) {
            String zLowerCaseValueAsString = zLowerCaseValue.toString();
            valMap.put("zLowerCase", zLowerCaseValueAsString);
        }
        String LValue = getL();
        if (LValue != null) {
            String LValueAsString = LValue.toString();
            valMap.put("L", LValueAsString);
        }
        String nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            String nLowerCaseValueAsString = nLowerCaseValue.toString();
            valMap.put("nLowerCase", nLowerCaseValueAsString);
        }
        String NValue = getN();
        if (NValue != null) {
            String NValueAsString = NValue.toString();
            valMap.put("N", NValueAsString);
        }
        Long TValue = getT();
        if (TValue != null) {
            String TValueAsString = TValue.toString();
            valMap.put("T", TValueAsString);
        }
        Long tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            String tLowerCaseValueAsString = tLowerCaseValue.toString();
            valMap.put("tLowerCase", tLowerCaseValueAsString);
        }
        Long IValue = getI();
        if (IValue != null) {
            String IValueAsString = IValue.toString();
            valMap.put("I", IValueAsString);
        }
        Boolean wLowerCaseValue = getwLowerCase();
        if (wLowerCaseValue != null) {
            String wLowerCaseValueAsString = wLowerCaseValue.toString();
            valMap.put("wLowerCase", wLowerCaseValueAsString);
        }
        Boolean mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            String mLowerCaseValueAsString = mLowerCaseValue.toString();
            valMap.put("mLowerCase", mLowerCaseValueAsString);
        }
        Boolean MValue = getM();
        if (MValue != null) {
            String MValueAsString = MValue.toString();
            valMap.put("M", MValueAsString);
        }
        Long OValue = getO();
        if (OValue != null) {
            String OValueAsString = OValue.toString();
            valMap.put("O", OValueAsString);
        }
        String ZValue = getZ();
        if (ZValue != null) {
            String ZValueAsString = ZValue.toString();
            valMap.put("Z", ZValueAsString);
        }
        String YValue = getY();
        if (YValue != null) {
            String YValueAsString = YValue.toString();
            valMap.put("Y", YValueAsString);
        }
        String QValue = getQ();
        if (QValue != null) {
            String QValueAsString = QValue.toString();
            valMap.put("Q", QValueAsString);
        }
        Long WValue = getW();
        if (WValue != null) {
            String WValueAsString = WValue.toString();
            valMap.put("W", WValueAsString);
        }
        String VValue = getV();
        if (VValue != null) {
            String VValueAsString = VValue.toString();
            valMap.put("V", VValueAsString);
        }
        String dLowerCaseValue = getdLowerCase();
        if (dLowerCaseValue != null) {
            String dLowerCaseValueAsString = dLowerCaseValue.toString();
            valMap.put("dLowerCase", dLowerCaseValueAsString);
        }
        String DValue = getD();
        if (DValue != null) {
            String DValueAsString = DValue.toString();
            valMap.put("D", DValueAsString);
        }
        String jLowerCaseValue = getjLowerCase();
        if (jLowerCaseValue != null) {
            String jLowerCaseValueAsString = jLowerCaseValue.toString();
            valMap.put("jLowerCase", jLowerCaseValueAsString);
        }
        String JValue = getJ();
        if (JValue != null) {
            String JValueAsString = JValue.toString();
            valMap.put("J", JValueAsString);
        }
        String vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            String vLowerCaseValueAsString = vLowerCaseValue.toString();
            valMap.put("vLowerCase", vLowerCaseValueAsString);
        }
        String AValue = getA();
        if (AValue != null) {
            String AValueAsString = AValue.toString();
            valMap.put("A", AValueAsString);
        }
        String BValue = getB();
        if (BValue != null) {
            String BValueAsString = BValue.toString();
            valMap.put("B", BValueAsString);
        }
        String uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            String uLowerCaseValueAsString = uLowerCaseValue.toString();
            valMap.put("uLowerCase", uLowerCaseValueAsString);
        }
        String UValue = getU();
        if (UValue != null) {
            String UValueAsString = UValue.toString();
            valMap.put("U", UValueAsString);
        }
        String csValue = getCs();
        if (csValue != null) {
            String csValueAsString = csValue.toString();
            valMap.put("cs", csValueAsString);
        }
        String plValue = getPl();
        if (plValue != null) {
            String plValueAsString = plValue.toString();
            valMap.put("pl", plValueAsString);
        }
        String pLValue = getpL();
        if (pLValue != null) {
            String pLValueAsString = pLValue.toString();
            valMap.put("pL", pLValueAsString);
        }
        String pYValue = getpY();
        if (pYValue != null) {
            String pYValueAsString = pYValue.toString();
            valMap.put("pY", pYValueAsString);
        }
        String bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = bLowerCaseValue.toString();
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        String aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = aLowerCaseValue.toString();
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }
        String kLowerCaseValue = getkLowerCase();
        if (kLowerCaseValue != null) {
            String kLowerCaseValueAsString = kLowerCaseValue.toString();
            valMap.put("kLowerCase", kLowerCaseValueAsString);
        }
        Boolean uSValue = getuS();
        if (uSValue != null) {
            String uSValueAsString = uSValue.toString();
            valMap.put("uS", uSValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }
        Object SValue = getS();
        if (SValue != null) {
            valMap.put("S", SValue);
        }
        Object oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            valMap.put("oLowerCase", oLowerCaseValue);
        }
        Object fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            valMap.put("fLowerCase", fLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object PValue = getP();
        if (PValue != null) {
            valMap.put("P", PValue);
        }
        Object FValue = getF();
        if (FValue != null) {
            valMap.put("F", FValue);
        }
        Object gLowerCaseValue = getgLowerCase();
        if (gLowerCaseValue != null) {
            valMap.put("gLowerCase", gLowerCaseValue);
        }
        Object CValue = getC();
        if (CValue != null) {
            valMap.put("C", CValue);
        }
        Object xLowerCaseValue = getxLowerCase();
        if (xLowerCaseValue != null) {
            valMap.put("xLowerCase", xLowerCaseValue);
        }
        Object XValue = getX();
        if (XValue != null) {
            valMap.put("X", XValue);
        }
        Object rLowerCaseValue = getrLowerCase();
        if (rLowerCaseValue != null) {
            valMap.put("rLowerCase", rLowerCaseValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }
        Object lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            valMap.put("lLowerCase", lLowerCaseValue);
        }
        Object zLowerCaseValue = getzLowerCase();
        if (zLowerCaseValue != null) {
            valMap.put("zLowerCase", zLowerCaseValue);
        }
        Object LValue = getL();
        if (LValue != null) {
            valMap.put("L", LValue);
        }
        Object nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            valMap.put("nLowerCase", nLowerCaseValue);
        }
        Object NValue = getN();
        if (NValue != null) {
            valMap.put("N", NValue);
        }
        Object TValue = getT();
        if (TValue != null) {
            valMap.put("T", TValue);
        }
        Object tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            valMap.put("tLowerCase", tLowerCaseValue);
        }
        Object IValue = getI();
        if (IValue != null) {
            valMap.put("I", IValue);
        }
        Object wLowerCaseValue = getwLowerCase();
        if (wLowerCaseValue != null) {
            valMap.put("wLowerCase", wLowerCaseValue);
        }
        Object mLowerCaseValue = getmLowerCase();
        if (mLowerCaseValue != null) {
            valMap.put("mLowerCase", mLowerCaseValue);
        }
        Object MValue = getM();
        if (MValue != null) {
            valMap.put("M", MValue);
        }
        Object OValue = getO();
        if (OValue != null) {
            valMap.put("O", OValue);
        }
        Object ZValue = getZ();
        if (ZValue != null) {
            valMap.put("Z", ZValue);
        }
        Object YValue = getY();
        if (YValue != null) {
            valMap.put("Y", YValue);
        }
        Object QValue = getQ();
        if (QValue != null) {
            valMap.put("Q", QValue);
        }
        Object WValue = getW();
        if (WValue != null) {
            valMap.put("W", WValue);
        }
        Object VValue = getV();
        if (VValue != null) {
            valMap.put("V", VValue);
        }
        Object dLowerCaseValue = getdLowerCase();
        if (dLowerCaseValue != null) {
            valMap.put("dLowerCase", dLowerCaseValue);
        }
        Object DValue = getD();
        if (DValue != null) {
            valMap.put("D", DValue);
        }
        Object jLowerCaseValue = getjLowerCase();
        if (jLowerCaseValue != null) {
            valMap.put("jLowerCase", jLowerCaseValue);
        }
        Object JValue = getJ();
        if (JValue != null) {
            valMap.put("J", JValue);
        }
        Object vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            valMap.put("vLowerCase", vLowerCaseValue);
        }
        Object AValue = getA();
        if (AValue != null) {
            valMap.put("A", AValue);
        }
        Object BValue = getB();
        if (BValue != null) {
            valMap.put("B", BValue);
        }
        Object uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            valMap.put("uLowerCase", uLowerCaseValue);
        }
        Object UValue = getU();
        if (UValue != null) {
            valMap.put("U", UValue);
        }
        Object csValue = getCs();
        if (csValue != null) {
            valMap.put("cs", csValue);
        }
        Object plValue = getPl();
        if (plValue != null) {
            valMap.put("pl", plValue);
        }
        Object pLValue = getpL();
        if (pLValue != null) {
            valMap.put("pL", pLValue);
        }
        Object pYValue = getpY();
        if (pYValue != null) {
            valMap.put("pY", pYValue);
        }
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }
        Object kLowerCaseValue = getkLowerCase();
        if (kLowerCaseValue != null) {
            valMap.put("kLowerCase", kLowerCaseValue);
        }
        Object uSValue = getuS();
        if (uSValue != null) {
            valMap.put("uS", uSValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("E");
        openapiFields.add("s");
        openapiFields.add("c");
        openapiFields.add("S");
        openapiFields.add("o");
        openapiFields.add("f");
        openapiFields.add("q");
        openapiFields.add("p");
        openapiFields.add("P");
        openapiFields.add("F");
        openapiFields.add("g");
        openapiFields.add("C");
        openapiFields.add("x");
        openapiFields.add("X");
        openapiFields.add("r");
        openapiFields.add("i");
        openapiFields.add("l");
        openapiFields.add("z");
        openapiFields.add("L");
        openapiFields.add("n");
        openapiFields.add("N");
        openapiFields.add("T");
        openapiFields.add("t");
        openapiFields.add("I");
        openapiFields.add("w");
        openapiFields.add("m");
        openapiFields.add("M");
        openapiFields.add("O");
        openapiFields.add("Z");
        openapiFields.add("Y");
        openapiFields.add("Q");
        openapiFields.add("W");
        openapiFields.add("V");
        openapiFields.add("d");
        openapiFields.add("D");
        openapiFields.add("j");
        openapiFields.add("J");
        openapiFields.add("v");
        openapiFields.add("A");
        openapiFields.add("B");
        openapiFields.add("u");
        openapiFields.add("U");
        openapiFields.add("Cs");
        openapiFields.add("pl");
        openapiFields.add("pL");
        openapiFields.add("pY");
        openapiFields.add("b");
        openapiFields.add("a");
        openapiFields.add("k");
        openapiFields.add("uS");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Executionreport
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Executionreport.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Executionreport is not found in the"
                                        + " empty JSON string",
                                Executionreport.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Executionreport.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Executionreport` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull())
                && !jsonObj.get("c").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `c` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("c").toString()));
        }
        if ((jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull())
                && !jsonObj.get("S").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `S` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("S").toString()));
        }
        if ((jsonObj.get("o") != null && !jsonObj.get("o").isJsonNull())
                && !jsonObj.get("o").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `o` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("o").toString()));
        }
        if ((jsonObj.get("f") != null && !jsonObj.get("f").isJsonNull())
                && !jsonObj.get("f").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `f` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("f").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("P") != null && !jsonObj.get("P").isJsonNull())
                && !jsonObj.get("P").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `P` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("P").toString()));
        }
        if ((jsonObj.get("F") != null && !jsonObj.get("F").isJsonNull())
                && !jsonObj.get("F").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `F` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("F").toString()));
        }
        if ((jsonObj.get("C") != null && !jsonObj.get("C").isJsonNull())
                && !jsonObj.get("C").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `C` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("C").toString()));
        }
        if ((jsonObj.get("x") != null && !jsonObj.get("x").isJsonNull())
                && !jsonObj.get("x").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `x` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("x").toString()));
        }
        if ((jsonObj.get("X") != null && !jsonObj.get("X").isJsonNull())
                && !jsonObj.get("X").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `X` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("X").toString()));
        }
        if ((jsonObj.get("r") != null && !jsonObj.get("r").isJsonNull())
                && !jsonObj.get("r").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `r` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("r").toString()));
        }
        if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull())
                && !jsonObj.get("l").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `l` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("l").toString()));
        }
        if ((jsonObj.get("z") != null && !jsonObj.get("z").isJsonNull())
                && !jsonObj.get("z").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `z` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("z").toString()));
        }
        if ((jsonObj.get("L") != null && !jsonObj.get("L").isJsonNull())
                && !jsonObj.get("L").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `L` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("L").toString()));
        }
        if ((jsonObj.get("n") != null && !jsonObj.get("n").isJsonNull())
                && !jsonObj.get("n").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `n` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("n").toString()));
        }
        if ((jsonObj.get("N") != null && !jsonObj.get("N").isJsonNull())
                && !jsonObj.get("N").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `N` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("N").toString()));
        }
        if ((jsonObj.get("Z") != null && !jsonObj.get("Z").isJsonNull())
                && !jsonObj.get("Z").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Z` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Z").toString()));
        }
        if ((jsonObj.get("Y") != null && !jsonObj.get("Y").isJsonNull())
                && !jsonObj.get("Y").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Y` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Y").toString()));
        }
        if ((jsonObj.get("Q") != null && !jsonObj.get("Q").isJsonNull())
                && !jsonObj.get("Q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Q").toString()));
        }
        if ((jsonObj.get("V") != null && !jsonObj.get("V").isJsonNull())
                && !jsonObj.get("V").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `V` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("V").toString()));
        }
        if ((jsonObj.get("d") != null && !jsonObj.get("d").isJsonNull())
                && !jsonObj.get("d").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `d` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("d").toString()));
        }
        if ((jsonObj.get("D") != null && !jsonObj.get("D").isJsonNull())
                && !jsonObj.get("D").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `D` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("D").toString()));
        }
        if ((jsonObj.get("j") != null && !jsonObj.get("j").isJsonNull())
                && !jsonObj.get("j").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `j` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("j").toString()));
        }
        if ((jsonObj.get("J") != null && !jsonObj.get("J").isJsonNull())
                && !jsonObj.get("J").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `J` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("J").toString()));
        }
        if ((jsonObj.get("v") != null && !jsonObj.get("v").isJsonNull())
                && !jsonObj.get("v").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `v` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("v").toString()));
        }
        if ((jsonObj.get("A") != null && !jsonObj.get("A").isJsonNull())
                && !jsonObj.get("A").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `A` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("A").toString()));
        }
        if ((jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull())
                && !jsonObj.get("B").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `B` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("B").toString()));
        }
        if ((jsonObj.get("u") != null && !jsonObj.get("u").isJsonNull())
                && !jsonObj.get("u").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `u` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("u").toString()));
        }
        if ((jsonObj.get("U") != null && !jsonObj.get("U").isJsonNull())
                && !jsonObj.get("U").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `U` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("U").toString()));
        }
        if ((jsonObj.get("Cs") != null && !jsonObj.get("Cs").isJsonNull())
                && !jsonObj.get("Cs").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Cs` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Cs").toString()));
        }
        if ((jsonObj.get("pl") != null && !jsonObj.get("pl").isJsonNull())
                && !jsonObj.get("pl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pl` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("pl").toString()));
        }
        if ((jsonObj.get("pL") != null && !jsonObj.get("pL").isJsonNull())
                && !jsonObj.get("pL").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pL` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("pL").toString()));
        }
        if ((jsonObj.get("pY") != null && !jsonObj.get("pY").isJsonNull())
                && !jsonObj.get("pY").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pY` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("pY").toString()));
        }
        if ((jsonObj.get("b") != null && !jsonObj.get("b").isJsonNull())
                && !jsonObj.get("b").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("b").toString()));
        }
        if ((jsonObj.get("a") != null && !jsonObj.get("a").isJsonNull())
                && !jsonObj.get("a").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("a").toString()));
        }
        if ((jsonObj.get("k") != null && !jsonObj.get("k").isJsonNull())
                && !jsonObj.get("k").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `k` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("k").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Executionreport.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Executionreport' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Executionreport> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Executionreport.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Executionreport>() {
                        @Override
                        public void write(JsonWriter out, Executionreport value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Executionreport read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Executionreport given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Executionreport
     * @throws IOException if the JSON string is invalid with respect to Executionreport
     */
    public static Executionreport fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Executionreport.class);
    }

    /**
     * Convert an instance of Executionreport to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

/*
 * Binance Margin Trading WebSocket Market Streams
 * OpenAPI Specification for the Binance Margin Trading WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.websocket.stream.model;

import com.binance.connector.client.common.AbstractOpenApiSchema;
import com.binance.connector.client.margin_trading.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.validator.constraints.*;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class TradeDataStreamEventsResponse extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(TradeDataStreamEventsResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TradeDataStreamEventsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TradeDataStreamEventsResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Outboundaccountposition> adapterOutboundaccountposition =
                    gson.getDelegateAdapter(this, TypeToken.get(Outboundaccountposition.class));
            final TypeAdapter<Balanceupdate> adapterBalanceupdate =
                    gson.getDelegateAdapter(this, TypeToken.get(Balanceupdate.class));
            final TypeAdapter<Listenkeyexpired> adapterListenkeyexpired =
                    gson.getDelegateAdapter(this, TypeToken.get(Listenkeyexpired.class));
            final TypeAdapter<Executionreport> adapterExecutionreport =
                    gson.getDelegateAdapter(this, TypeToken.get(Executionreport.class));
            final TypeAdapter<Liststatus> adapterListstatus =
                    gson.getDelegateAdapter(this, TypeToken.get(Liststatus.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TradeDataStreamEventsResponse>() {
                        @Override
                        public void write(JsonWriter out, TradeDataStreamEventsResponse value)
                                throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `Outboundaccountposition`
                            if (value.getActualInstance() instanceof Outboundaccountposition) {
                                JsonElement element =
                                        adapterOutboundaccountposition.toJsonTree(
                                                (Outboundaccountposition)
                                                        value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `Balanceupdate`
                            if (value.getActualInstance() instanceof Balanceupdate) {
                                JsonElement element =
                                        adapterBalanceupdate.toJsonTree(
                                                (Balanceupdate) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `Listenkeyexpired`
                            if (value.getActualInstance() instanceof Listenkeyexpired) {
                                JsonElement element =
                                        adapterListenkeyexpired.toJsonTree(
                                                (Listenkeyexpired) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `Executionreport`
                            if (value.getActualInstance() instanceof Executionreport) {
                                JsonElement element =
                                        adapterExecutionreport.toJsonTree(
                                                (Executionreport) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `Liststatus`
                            if (value.getActualInstance() instanceof Liststatus) {
                                JsonElement element =
                                        adapterListstatus.toJsonTree(
                                                (Liststatus) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " Balanceupdate, Executionreport, Listenkeyexpired,"
                                            + " Liststatus, Outboundaccountposition");
                        }

                        @Override
                        public TradeDataStreamEventsResponse read(JsonReader in)
                                throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            JsonObject jsonObject = jsonElement.getAsJsonObject();

                            // use discriminator value for faster oneOf lookup
                            TradeDataStreamEventsResponse newTradeDataStreamEventsResponse =
                                    new TradeDataStreamEventsResponse();
                            if (jsonObject.get("e") == null) {
                                log.log(
                                        Level.WARNING,
                                        "Failed to lookup discriminator value for"
                                            + " TradeDataStreamEventsResponse as `e` was not found"
                                            + " in the payload or the payload is empty.");
                            } else {
                                // look up the discriminator value in the field `e`
                                switch (jsonObject.get("e").getAsString()) {
                                    case "balanceUpdate":
                                        deserialized =
                                                adapterBalanceupdate.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "executionReport":
                                        deserialized =
                                                adapterExecutionreport.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "listStatus":
                                        deserialized = adapterListstatus.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "listenKeyExpired":
                                        deserialized =
                                                adapterListenkeyexpired.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "outboundAccountPosition":
                                        deserialized =
                                                adapterOutboundaccountposition.fromJsonTree(
                                                        jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "balanceupdate":
                                        deserialized =
                                                adapterBalanceupdate.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "executionreport":
                                        deserialized =
                                                adapterExecutionreport.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "listenkeyexpired":
                                        deserialized =
                                                adapterListenkeyexpired.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "liststatus":
                                        deserialized = adapterListstatus.fromJsonTree(jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    case "outboundaccountposition":
                                        deserialized =
                                                adapterOutboundaccountposition.fromJsonTree(
                                                        jsonObject);
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                deserialized);
                                        return newTradeDataStreamEventsResponse;
                                    default:
                                        newTradeDataStreamEventsResponse.setActualInstance(
                                                jsonElement.toString());
                                        log.log(
                                                Level.WARNING,
                                                String.format(
                                                        "Failed to lookup discriminator value `%s`"
                                                            + " for TradeDataStreamEventsResponse."
                                                            + " Possible values: balanceUpdate"
                                                            + " executionReport listStatus"
                                                            + " listenKeyExpired"
                                                            + " outboundAccountPosition"
                                                            + " balanceupdate executionreport"
                                                            + " listenkeyexpired liststatus"
                                                            + " outboundaccountposition. Falling"
                                                            + " back to String.",
                                                        jsonObject.get("e").getAsString()));
                                }
                            }

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize Outboundaccountposition
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Outboundaccountposition.validateJsonElement(jsonElement);
                                actualAdapter = adapterOutboundaccountposition;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'Outboundaccountposition'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Outboundaccountposition failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                                + " 'Outboundaccountposition'",
                                        e);
                            }
                            // deserialize Balanceupdate
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Balanceupdate.validateJsonElement(jsonElement);
                                actualAdapter = adapterBalanceupdate;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Balanceupdate'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Balanceupdate failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Balanceupdate'",
                                        e);
                            }
                            // deserialize Listenkeyexpired
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Listenkeyexpired.validateJsonElement(jsonElement);
                                actualAdapter = adapterListenkeyexpired;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'Listenkeyexpired'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Listenkeyexpired failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Listenkeyexpired'",
                                        e);
                            }
                            // deserialize Executionreport
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Executionreport.validateJsonElement(jsonElement);
                                actualAdapter = adapterExecutionreport;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Executionreport'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Executionreport failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Executionreport'",
                                        e);
                            }
                            // deserialize Liststatus
                            try {
                                // validate the JSON object to see if any exception is thrown
                                Liststatus.validateJsonElement(jsonElement);
                                actualAdapter = adapterListstatus;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Liststatus'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Liststatus failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'Liststatus'",
                                        e);
                            }

                            if (match == 1) {
                                TradeDataStreamEventsResponse ret =
                                        new TradeDataStreamEventsResponse();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for"
                                                + " TradeDataStreamEventsResponse: %d classes match"
                                                + " result, expected 1. Detailed failure message"
                                                + " for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TradeDataStreamEventsResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public TradeDataStreamEventsResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Outboundaccountposition", Outboundaccountposition.class);
        schemas.put("Balanceupdate", Balanceupdate.class);
        schemas.put("Listenkeyexpired", Listenkeyexpired.class);
        schemas.put("Executionreport", Executionreport.class);
        schemas.put("Liststatus", Liststatus.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TradeDataStreamEventsResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: Balanceupdate, Executionreport, Listenkeyexpired,
     * Liststatus, Outboundaccountposition
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Outboundaccountposition) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Balanceupdate) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Listenkeyexpired) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Executionreport) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Liststatus) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be Balanceupdate, Executionreport, Listenkeyexpired,"
                        + " Liststatus, Outboundaccountposition");
    }

    /**
     * Get the actual instance, which can be the following: Balanceupdate, Executionreport,
     * Listenkeyexpired, Liststatus, Outboundaccountposition
     *
     * @return The actual instance (Balanceupdate, Executionreport, Listenkeyexpired, Liststatus,
     *     Outboundaccountposition)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Outboundaccountposition`. If the actual instance is not
     * `Outboundaccountposition`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `Outboundaccountposition`
     * @throws ClassCastException if the instance is not `Outboundaccountposition`
     */
    public Outboundaccountposition getOutboundaccountposition() throws ClassCastException {
        return (Outboundaccountposition) super.getActualInstance();
    }

    /**
     * Get the actual instance of `Balanceupdate`. If the actual instance is not `Balanceupdate`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Balanceupdate`
     * @throws ClassCastException if the instance is not `Balanceupdate`
     */
    public Balanceupdate getBalanceupdate() throws ClassCastException {
        return (Balanceupdate) super.getActualInstance();
    }

    /**
     * Get the actual instance of `Listenkeyexpired`. If the actual instance is not
     * `Listenkeyexpired`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `Listenkeyexpired`
     * @throws ClassCastException if the instance is not `Listenkeyexpired`
     */
    public Listenkeyexpired getListenkeyexpired() throws ClassCastException {
        return (Listenkeyexpired) super.getActualInstance();
    }

    /**
     * Get the actual instance of `Executionreport`. If the actual instance is not
     * `Executionreport`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `Executionreport`
     * @throws ClassCastException if the instance is not `Executionreport`
     */
    public Executionreport getExecutionreport() throws ClassCastException {
        return (Executionreport) super.getActualInstance();
    }

    /**
     * Get the actual instance of `Liststatus`. If the actual instance is not `Liststatus`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `Liststatus`
     * @throws ClassCastException if the instance is not `Liststatus`
     */
    public Liststatus getListstatus() throws ClassCastException {
        return (Liststatus) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     TradeDataStreamEventsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Outboundaccountposition
        try {
            Outboundaccountposition.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Outboundaccountposition failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Balanceupdate
        try {
            Balanceupdate.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Balanceupdate failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Listenkeyexpired
        try {
            Listenkeyexpired.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Listenkeyexpired failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Executionreport
        try {
            Executionreport.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Executionreport failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Liststatus
        try {
            Liststatus.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for Liststatus failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for TradeDataStreamEventsResponse with"
                                    + " oneOf schemas: Balanceupdate, Executionreport,"
                                    + " Listenkeyexpired, Liststatus, Outboundaccountposition. %d"
                                    + " class(es) match the result, expected 1. Detailed failure"
                                    + " message for oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TradeDataStreamEventsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TradeDataStreamEventsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     TradeDataStreamEventsResponse
     */
    public static TradeDataStreamEventsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TradeDataStreamEventsResponse.class);
    }

    /**
     * Convert an instance of TradeDataStreamEventsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

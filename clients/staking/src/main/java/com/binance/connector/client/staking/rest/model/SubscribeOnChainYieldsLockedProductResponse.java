/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** SubscribeOnChainYieldsLockedProductResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SubscribeOnChainYieldsLockedProductResponse {
    public static final String SERIALIZED_NAME_PURCHASE_ID = "purchaseId";

    @SerializedName(SERIALIZED_NAME_PURCHASE_ID)
    @jakarta.annotation.Nullable
    private Long purchaseId;

    public static final String SERIALIZED_NAME_POSITION_ID = "positionId";

    @SerializedName(SERIALIZED_NAME_POSITION_ID)
    @jakarta.annotation.Nullable
    private String positionId;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_SUCCESS = "success";

    @SerializedName(SERIALIZED_NAME_SUCCESS)
    @jakarta.annotation.Nullable
    private Boolean success;

    public SubscribeOnChainYieldsLockedProductResponse() {}

    public SubscribeOnChainYieldsLockedProductResponse purchaseId(
            @jakarta.annotation.Nullable Long purchaseId) {
        this.purchaseId = purchaseId;
        return this;
    }

    /**
     * Get purchaseId
     *
     * @return purchaseId
     */
    @jakarta.annotation.Nullable
    public Long getPurchaseId() {
        return purchaseId;
    }

    public void setPurchaseId(@jakarta.annotation.Nullable Long purchaseId) {
        this.purchaseId = purchaseId;
    }

    public SubscribeOnChainYieldsLockedProductResponse positionId(
            @jakarta.annotation.Nullable String positionId) {
        this.positionId = positionId;
        return this;
    }

    /**
     * Get positionId
     *
     * @return positionId
     */
    @jakarta.annotation.Nullable
    public String getPositionId() {
        return positionId;
    }

    public void setPositionId(@jakarta.annotation.Nullable String positionId) {
        this.positionId = positionId;
    }

    public SubscribeOnChainYieldsLockedProductResponse amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public SubscribeOnChainYieldsLockedProductResponse success(
            @jakarta.annotation.Nullable Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get success
     *
     * @return success
     */
    @jakarta.annotation.Nullable
    public Boolean getSuccess() {
        return success;
    }

    public void setSuccess(@jakarta.annotation.Nullable Boolean success) {
        this.success = success;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribeOnChainYieldsLockedProductResponse subscribeOnChainYieldsLockedProductResponse =
                (SubscribeOnChainYieldsLockedProductResponse) o;
        return Objects.equals(
                        this.purchaseId, subscribeOnChainYieldsLockedProductResponse.purchaseId)
                && Objects.equals(
                        this.positionId, subscribeOnChainYieldsLockedProductResponse.positionId)
                && Objects.equals(this.amount, subscribeOnChainYieldsLockedProductResponse.amount)
                && Objects.equals(
                        this.success, subscribeOnChainYieldsLockedProductResponse.success);
    }

    @Override
    public int hashCode() {
        return Objects.hash(purchaseId, positionId, amount, success);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscribeOnChainYieldsLockedProductResponse {\n");
        sb.append("		purchaseId: ").append(toIndentedString(purchaseId)).append("\n");
        sb.append("		positionId: ").append(toIndentedString(positionId)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		success: ").append(toIndentedString(success)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object purchaseIdValue = getPurchaseId();
        String purchaseIdValueAsString = "";
        purchaseIdValueAsString = purchaseIdValue.toString();
        sb.append("purchaseId=").append(urlEncode(purchaseIdValueAsString)).append("");
        Object positionIdValue = getPositionId();
        String positionIdValueAsString = "";
        positionIdValueAsString = positionIdValue.toString();
        sb.append("positionId=").append(urlEncode(positionIdValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object successValue = getSuccess();
        String successValueAsString = "";
        successValueAsString = successValue.toString();
        sb.append("success=").append(urlEncode(successValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("purchaseId");
        openapiFields.add("positionId");
        openapiFields.add("amount");
        openapiFields.add("success");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SubscribeOnChainYieldsLockedProductResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SubscribeOnChainYieldsLockedProductResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " SubscribeOnChainYieldsLockedProductResponse is not found in"
                                    + " the empty JSON string",
                                SubscribeOnChainYieldsLockedProductResponse.openapiRequiredFields
                                        .toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("positionId") != null && !jsonObj.get("positionId").isJsonNull())
                && !jsonObj.get("positionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionId").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SubscribeOnChainYieldsLockedProductResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'SubscribeOnChainYieldsLockedProductResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SubscribeOnChainYieldsLockedProductResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SubscribeOnChainYieldsLockedProductResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SubscribeOnChainYieldsLockedProductResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, SubscribeOnChainYieldsLockedProductResponse value)
                                throws IOException {
                            JsonElement obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SubscribeOnChainYieldsLockedProductResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SubscribeOnChainYieldsLockedProductResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SubscribeOnChainYieldsLockedProductResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     SubscribeOnChainYieldsLockedProductResponse
     */
    public static SubscribeOnChainYieldsLockedProductResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, SubscribeOnChainYieldsLockedProductResponse.class);
    }

    /**
     * Convert an instance of SubscribeOnChainYieldsLockedProductResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
